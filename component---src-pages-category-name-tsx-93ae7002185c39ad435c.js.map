{"version":3,"file":"component---src-pages-category-name-tsx-93ae7002185c39ad435c.js","mappings":"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","sources":["webpack://www/../node_modules/@chakra-ui/media-query/dist/chakra-ui-media-query.esm.js","webpack://www/./src/constants/motion.ts","webpack://www/./src/components/blocks/motion-box.tsx","webpack://www/./src/components/typography/heading.tsx","webpack://www/./src/components/writing/card.tsx","webpack://www/./src/components/writing/category-hero.tsx","webpack://www/./src/components/writing/category-view.tsx","webpack://www/./src/components/writing/subnavigation.tsx","webpack://www/./src/hooks/use-categories.tsx","webpack://www/./src/constants/space.ts","webpack://www/./src/pages/{Category.name}.tsx"],"sourcesContent":["import { useTheme } from '@chakra-ui/system';\nimport { isBrowser, __DEV__, memoizedGet, breakpoints, isArray, fromEntries, arrayToObjectNotation } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport React__default from 'react';\nimport { useEnvironment } from '@chakra-ui/react-env';\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nfunction useMediaQuery(query) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var isSupported = isBrowser && \"matchMedia\" in env.window;\n  var _React$useState = React.useState(queries.map(function (query) {\n      return isSupported ? !!env.window.matchMedia(query).matches : false;\n    })),\n    matches = _React$useState[0],\n    setMatches = _React$useState[1]; // Specifying matches in the dependency list will cause the event listeners\n  // to unload and then load each time the dependency changes. This causes\n  // Media Query Events to be missed. The event listeners should only be unloaded\n  // when the component unloads.\n\n  useSafeLayoutEffect(function () {\n    if (!isSupported) return undefined;\n    var mediaQueryList = queries.map(function (query) {\n      return env.window.matchMedia(query);\n    });\n    var listenerList = mediaQueryList.map(function (_, index) {\n      var listener = function listener(mqlEvent) {\n        var queryIndex = mediaQueryList.findIndex(function (mediaQuery) {\n          return mediaQuery.media === mqlEvent.media;\n        }); // As the event listener is on the media query list, any time the\n        // listener is called, we know there is a change. There's no need\n        // to compare the previous matches with current. Using\n        // setMatches(matches => {...}) provides access to the current matches\n        // state.  Trying to access matches outside the setMatches function\n        // would provide data from the the time of instantiation (stale).\n\n        setMatches(function (matches) {\n          var currentMatches = matches.map(function (x) {\n            return x;\n          });\n          currentMatches[queryIndex] = mqlEvent.matches;\n          return currentMatches;\n        });\n      }; // Listening to the 'change' event on the Media Query List Object\n      // is more performant as the callback is only invoked when a specified\n      // media query is matched. Using addEventListener on the window object\n      // to listen for the resize event will call the callback on every\n      // viewport resize.\n\n      if (typeof mediaQueryList[index].addEventListener === \"function\") {\n        mediaQueryList[index].addEventListener(\"change\", listener);\n      } else {\n        mediaQueryList[index].addListener(listener);\n      }\n      return listener;\n    });\n    return function () {\n      mediaQueryList.forEach(function (_, index) {\n        if (typeof mediaQueryList[index].removeEventListener === \"function\") {\n          mediaQueryList[index].removeEventListener(\"change\", listenerList[index]);\n        } else {\n          mediaQueryList[index].removeListener(listenerList[index]);\n        }\n      });\n    };\n  }, []);\n  return matches;\n}\n\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\nvar Visibility = function Visibility(props) {\n  var breakpoint = props.breakpoint,\n    hide = props.hide,\n    children = props.children;\n  var _useMediaQuery = useMediaQuery(breakpoint),\n    show = _useMediaQuery[0];\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\nvar Hide = function Hide(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\nvar Show = function Show(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\nvar getBreakpoint = function getBreakpoint(theme, value) {\n  return memoizedGet(theme, \"breakpoints.\" + value, value);\n};\nfunction useQuery(props) {\n  var _props$breakpoint = props.breakpoint,\n    breakpoint = _props$breakpoint === void 0 ? \"\" : _props$breakpoint,\n    below = props.below,\n    above = props.above;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n  return query;\n}\n\n/**\n * React hook used to get the user's animation preference.\n */\n\nfunction usePrefersReducedMotion() {\n  var _useMediaQuery = useMediaQuery(\"(prefers-reduced-motion: reduce)\"),\n    prefersReducedMotion = _useMediaQuery[0];\n  return prefersReducedMotion;\n}\n/**\n * React hook for getting the user's color mode preference.\n */\n\nfunction useColorModePreference() {\n  var _useMediaQuery2 = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"]),\n    isLight = _useMediaQuery2[0],\n    isDark = _useMediaQuery2[1];\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return undefined;\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param [defaultBreakpoint=\"base\"] default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\nfunction useBreakpoint(defaultBreakpoint // default value ensures SSR+CSR consistency\n) {\n  if (defaultBreakpoint === void 0) {\n    defaultBreakpoint = \"base\";\n  }\n  var _useTheme = useTheme(),\n    __breakpoints = _useTheme.__breakpoints;\n  var env = useEnvironment();\n  var queries = React__default.useMemo(function () {\n    var _breakpoints$details;\n    return (_breakpoints$details = __breakpoints == null ? void 0 : __breakpoints.details.map(function (_ref) {\n      var minMaxQuery = _ref.minMaxQuery,\n        breakpoint = _ref.breakpoint;\n      return {\n        breakpoint: breakpoint,\n        query: minMaxQuery.replace(\"@media screen and \", \"\")\n      };\n    })) != null ? _breakpoints$details : [];\n  }, [__breakpoints]);\n  var _React$useState = React__default.useState(function () {\n      if (defaultBreakpoint) {\n        // use default breakpoint to ensure render consistency in SSR + CSR environments\n        // => first render on the client has to match the render on the server\n        var fallbackBreakpointDetail = queries.find(function (_ref2) {\n          var breakpoint = _ref2.breakpoint;\n          return breakpoint === defaultBreakpoint;\n        });\n        if (fallbackBreakpointDetail) {\n          return fallbackBreakpointDetail.breakpoint;\n        }\n      }\n      if (env.window.matchMedia) {\n        // set correct breakpoint on first render if no default breakpoint was provided\n        var matchingBreakpointDetail = queries.find(function (_ref3) {\n          var query = _ref3.query;\n          return env.window.matchMedia(query).matches;\n        });\n        if (matchingBreakpointDetail) {\n          return matchingBreakpointDetail.breakpoint;\n        }\n      }\n      return undefined;\n    }),\n    currentBreakpoint = _React$useState[0],\n    setCurrentBreakpoint = _React$useState[1];\n  React__default.useEffect(function () {\n    var allUnregisterFns = queries.map(function (_ref4) {\n      var breakpoint = _ref4.breakpoint,\n        query = _ref4.query;\n      var mediaQueryList = env.window.matchMedia(query);\n      if (mediaQueryList.matches) {\n        setCurrentBreakpoint(breakpoint);\n      }\n      var handleChange = function handleChange(ev) {\n        if (ev.matches) {\n          setCurrentBreakpoint(breakpoint);\n        }\n      }; // add media query listener\n\n      if (typeof mediaQueryList.addEventListener === \"function\") {\n        mediaQueryList.addEventListener(\"change\", handleChange);\n      } else {\n        mediaQueryList.addListener(handleChange);\n      } // return unregister fn\n\n      return function () {\n        if (typeof mediaQueryList.removeEventListener === \"function\") {\n          mediaQueryList.removeEventListener(\"change\", handleChange);\n        } else {\n          mediaQueryList.removeListener(handleChange);\n        }\n      };\n    });\n    return function () {\n      allUnregisterFns.forEach(function (unregister) {\n        return unregister();\n      });\n    };\n  }, [queries, __breakpoints, env.window]);\n  return currentBreakpoint;\n}\nfunction getClosestValue(values, breakpoint, breakpoints$1) {\n  if (breakpoints$1 === void 0) {\n    breakpoints$1 = breakpoints;\n  }\n  var index = Object.keys(values).indexOf(breakpoint);\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n  var stopIndex = breakpoints$1.indexOf(breakpoint);\n  while (stopIndex >= 0) {\n    var key = breakpoints$1[stopIndex];\n    if (values[key] != null) {\n      index = stopIndex;\n      break;\n    }\n    stopIndex -= 1;\n  }\n  if (index !== -1) {\n    var _key = breakpoints$1[index];\n    return values[_key];\n  }\n  return undefined;\n}\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @param values\n * @param [defaultBreakpoint] default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\nfunction useBreakpointValue(values, defaultBreakpoint) {\n  var _theme$__breakpoints;\n  var breakpoint = useBreakpoint(defaultBreakpoint);\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the sorted breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Array.from(((_theme$__breakpoints = theme.__breakpoints) == null ? void 0 : _theme$__breakpoints.keys) || []);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(function (_ref) {\n    var key = _ref[0],\n      value = _ref[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\nexport { Hide, Show, useBreakpoint, useBreakpointValue, useColorModePreference, useMediaQuery, usePrefersReducedMotion, useQuery };","export const transforms = {\n  beforeHover: {\n    transform: `translate3d(0, 0, 0)`,\n    transition: `transform 0.4s cubic-bezier(0.34, 1.56, 0.64, 1), box-shadow 0.4s cubic-bezier(0.34, 1.56, 0.64, 1)`,\n  },\n  onHover: {\n    transform: `translate3d(0, -8px, 0)`,\n    boxShadow: `0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)`,\n  },\n}\n","import * as React from \"react\"\nimport { Box, BoxProps, usePrefersReducedMotion } from \"@chakra-ui/react\"\nimport { transforms } from \"../../constants/motion\"\n\nexport const MotionBox: React.FC<BoxProps> = ({ children, ...rest }) => {\n  const shouldReduceMotion = usePrefersReducedMotion()\n\n  return (\n    <Box\n      transition={transforms.beforeHover.transition}\n      transform={transforms.beforeHover.transform}\n      _hover={\n        shouldReduceMotion ? {} : { transform: transforms.onHover.transform, boxShadow: transforms.onHover.boxShadow }\n      }\n      {...rest}\n    >\n      {children}\n    </Box>\n  )\n}\n","import * as React from \"react\"\nimport { Heading as ChakraHeading, HeadingProps as ChakraHeadingProps } from \"@chakra-ui/react\"\n\ninterface HeadingProps extends ChakraHeadingProps {\n  as: \"h1\" | \"h2\" | \"h3\" | \"h4\"\n}\n\n/**\n * Heading component accepting heading levels\n * Wraps the Heading component from Chakra\n */\nexport const Heading: React.FC<HeadingProps> = ({ as, children, ...rest }) => (\n  <ChakraHeading as={as} variant={as} {...rest}>\n    {children}\n  </ChakraHeading>\n)\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Text, useColorModeValue } from \"@chakra-ui/react\"\nimport { MotionBox } from \"../blocks/motion-box\"\nimport { Link } from \"../link\"\n\ntype CardProps = {\n  slug: string\n  title: string\n  subtitle?: string\n  description: string\n}\n\nexport const Card: React.FC<CardProps> = ({ slug, title, subtitle, description }) => {\n  const cardBg = useColorModeValue(`brand.cardBg`, `brand.dark.cardBg`)\n  const headingColor = useColorModeValue(`black`, `white`)\n  const headingHoverColor = useColorModeValue(`brand.primary`, `brand.dark.primary`)\n  const subheadingColor = useColorModeValue(`brand.cardSubheading`, `brand.dark.cardSubheading`)\n\n  return (\n    <MotionBox p={6} borderRadius=\"lg\" boxShadow=\"lg\" bg={cardBg} key={slug} _focusWithin={{ boxShadow: `outline` }}>\n      <Link\n        to={slug}\n        _focus={{ boxShadow: `none`, h2: { color: headingHoverColor } }}\n        _hover={{ textDecoration: `none`, h2: { color: headingHoverColor } }}\n      >\n        <Text as=\"h2\" fontSize=\"1.3125rem\" fontWeight=\"bold\" color={headingColor} transition=\"color 0.3s ease-in-out\">\n          {title}\n        </Text>\n        {subtitle && (\n          <Text as=\"h3\" fontSize=\"1.125rem\" fontWeight=\"medium\" color={subheadingColor}>\n            {subtitle}\n          </Text>\n        )}\n        <Text mt={6}>{description}</Text>\n      </Link>\n    </MotionBox>\n  )\n}\n\nexport const query = graphql`\n  fragment CardPostInformation on Post {\n    title\n    date\n    slug\n    subtitle\n    description\n  }\n`\n","import * as React from \"react\"\nimport { Box, Container, Flex, Text, Grid } from \"@chakra-ui/react\"\nimport { BackgroundProps } from \"@chakra-ui/system\"\nimport { space } from \"../../constants/space\"\nimport { Heading } from \"../typography/heading\"\n\ntype CategoryHeroProps = {\n  bgGradient: BackgroundProps[\"bgGradient\"]\n  title: string\n  description: React.ReactNode\n  image?: React.ReactNode\n}\n\nexport const CategoryHero: React.FC<CategoryHeroProps> = ({ bgGradient, title, description, image = undefined }) => (\n  <Box mt=\"-navigationWithSubHeight\" bgGradient={bgGradient} pt=\"navigationWithSubHeight\">\n    <Container py={space.paddingSmall}>\n      <Grid templateColumns=\"auto\" gap={12}>\n        <Flex direction=\"column\">\n          <Heading as=\"h1\" color=\"white\">\n            {title}\n          </Heading>\n          <Text textStyle=\"prominent\" color=\"gray.100\" maxWidth=\"65ch\">\n            {description}\n          </Text>\n        </Flex>\n        {image}\n      </Grid>\n    </Container>\n  </Box>\n)\n","import * as React from \"react\"\nimport { Container, Grid, Text, Link as ExternalLink } from \"@chakra-ui/react\"\nimport { space } from \"../../constants/space\"\nimport { SkipNavContent } from \"../a11y/skip-nav\"\nimport { Layout } from \"../blocks/layout\"\nimport { Card } from \"./card\"\nimport { WritingSubNavigation } from \"./subnavigation\"\n\ntype CategoryViewProps = {\n  posts: {\n    nodes: {\n      title: string\n      date: string\n      slug: string\n      subtitle: string\n      description: string\n    }[]\n  }\n}\n\nexport const CategoryView: React.FC<CategoryViewProps> = ({ posts, children }) => (\n  <Layout subnavigation={<WritingSubNavigation />}>\n    <SkipNavContent>\n      {children}\n      <Container py={space.paddingMedium}>\n        {posts.nodes.length > 0 ? (\n          <Grid gridTemplateColumns={[`1fr`, null, `repeat(2, 1fr)`]} gap={8} mx={[`0`, null, null, `-6`]}>\n            {posts.nodes.map((post) => (\n              <Card\n                key={post.slug}\n                slug={post.slug}\n                title={post.title}\n                subtitle={post.subtitle}\n                description={post.description}\n              />\n            ))}\n          </Grid>\n        ) : (\n          <Text textStyle=\"prominent\">\n            Sadly there's no content for this category available yet. Be sure to follow me on{` `}\n            <ExternalLink href=\"https://www.linkedin.com/in/amankalra172/\">Linkedin</ExternalLink> to not miss any\n            announcements about new posts :)\n          </Text>\n        )}\n      </Container>\n    </SkipNavContent>\n  </Layout>\n)\n","import * as React from \"react\"\nimport { Flex, HStack, useColorModeValue } from \"@chakra-ui/react\"\nimport { useCategories } from \"../../hooks/use-categories\"\nimport { Link } from \"../link\"\n\nexport const WritingSubNavigation: React.FC = () => {\n  const categories = useCategories()\n  const scrollbarBG = useColorModeValue(`blueGray.200`, `blueGray.700`)\n  const thumbBG = useColorModeValue(`blueGray.400`, `blueGray.400`)\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      py=\"2\"\n      data-name=\"subnavigation\"\n      sx={{\n        overflowX: `auto`,\n        overflowY: `hidden`,\n        scrollbarWidth: `thin`,\n        scrollbarColor: `${thumbBG} ${scrollbarBG}`,\n        \"::-webkit-scrollbar\": {\n          height: `12px`,\n        },\n        \"::-webkit-scrollbar-track\": {\n          background: scrollbarBG,\n          borderRadius: `6px`,\n        },\n        \"::-webkit-scrollbar-thumb\": {\n          backgroundColor: thumbBG,\n          borderRadius: `8px`,\n          borderWidth: `3px`,\n          borderStyle: `solid`,\n          borderColor: scrollbarBG,\n        },\n      }}\n    >\n      <HStack as=\"ul\" listStyleType=\"none\" spacing=\"2\" ml=\"-2\">\n        <li>\n          <Link\n            to=\"/writing\"\n            fontSize=\"md\"\n            p=\"2\"\n            activeClassName=\"active\"\n            sx={{ \"&.active\": { fontWeight: `semibold` } }}\n          >\n            Latest\n          </Link>\n        </li>\n        <li>\n          <Link\n            to=\"/tutorials\"\n            fontSize=\"md\"\n            p=\"2\"\n            activeClassName=\"active\"\n            sx={{ \"&.active\": { fontWeight: `semibold` } }}\n          >\n            Tutorials\n          </Link>\n        </li>\n        {categories.map((item) => (\n          <li key={item.slug}>\n            <Link\n              to={item.slug}\n              fontSize=\"md\"\n              p=\"2\"\n              activeClassName=\"active\"\n              sx={{ \"&.active\": { fontWeight: `semibold` } }}\n            >\n              {item.name}\n            </Link>\n          </li>\n        ))}\n      </HStack>\n    </Flex>\n  )\n}\n","import { graphql, useStaticQuery } from \"gatsby\"\n\ntype CategoryQueryResult = {\n  allCategory: {\n    nodes: {\n      name: string\n      slug: string\n    }[]\n  }\n}\n\nexport const useCategories = () => {\n  const data = useStaticQuery<CategoryQueryResult>(graphql`\n    {\n      allCategory(sort: { fields: name, order: ASC }) {\n        nodes {\n          name\n          slug\n        }\n      }\n    }\n  `)\n\n  return data.allCategory.nodes\n}\n","export const space = {\n  paddingLarge: [20, 24, null, 40, 48],\n  paddingMedium: [16, 24, null, 36, 40],\n  paddingSmall: [12, 16, null, 24, 28],\n}\n","import * as React from \"react\"\nimport { PageProps, graphql } from \"gatsby\"\nimport { CategoryHero } from \"../components/writing/category-hero\"\nimport { CategoryView } from \"../components/writing/category-view\"\nimport { SEO } from \"../components/seo\"\n\ntype ReactProps = {\n  posts: {\n    nodes: {\n      title: string\n      date: string\n      slug: string\n      subtitle: string\n      description: string\n    }[]\n    totalCount: number\n  }\n  category: {\n    name: string\n    description: string\n    gradient: string\n    slug: string\n  }\n}\n\nconst ReactCategory: React.FC<PageProps<ReactProps>> = ({ data: { posts, category } }) => (\n  <CategoryView posts={posts}>\n    <SEO\n      title={category.name}\n      description={category.description}\n      breadcrumbListItems={[{ name: category.name, url: category.slug }]}\n    />\n    <CategoryHero bgGradient={category.gradient} title={category.name} description={category.description} />\n  </CategoryView>\n)\n\nexport default ReactCategory\n\nexport const query = graphql`\n  query ($name: String!) {\n    category(name: { eq: $name }) {\n      name\n      description\n      gradient\n      slug\n    }\n    posts: allPost(\n      filter: { published: { eq: true }, category: { name: { eq: $name } } }\n      sort: { fields: date, order: DESC }\n    ) {\n      nodes {\n        ...CardPostInformation\n      }\n      totalCount\n    }\n  }\n`\n"],"names":["useSafeLayoutEffect","useMediaQuery","query","env","queries","Array","isArray","isSupported","window","_React$useState","map","matchMedia","matches","setMatches","mediaQueryList","listenerList","_","index","listener","mqlEvent","queryIndex","findIndex","mediaQuery","media","currentMatches","x","addEventListener","addListener","forEach","removeEventListener","removeListener","usePrefersReducedMotion","transforms","transform","transition","boxShadow","MotionBox","children","rest","shouldReduceMotion","_hover","Heading","as","variant","Card","slug","title","subtitle","description","cardBg","useColorModeValue","headingColor","headingHoverColor","subheadingColor","p","borderRadius","bg","key","_focusWithin","to","_focus","h2","color","textDecoration","fontSize","fontWeight","mt","CategoryHero","bgGradient","image","undefined","pt","py","space","templateColumns","gap","direction","textStyle","maxWidth","CategoryView","posts","subnavigation","nodes","length","gridTemplateColumns","mx","post","href","WritingSubNavigation","categories","useStaticQuery","allCategory","scrollbarBG","thumbBG","alignItems","sx","overflowX","overflowY","scrollbarWidth","scrollbarColor","height","background","backgroundColor","borderWidth","borderStyle","borderColor","listStyleType","spacing","ml","activeClassName","item","name","paddingLarge","paddingMedium","paddingSmall","data","category","breadcrumbListItems","url","gradient"],"sourceRoot":""}