{"version":3,"file":"component---src-pages-writing-tsx-fb4c1d75d0fbaa3287b5.js","mappings":"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","sources":["webpack://www/../node_modules/@chakra-ui/media-query/dist/chakra-ui-media-query.esm.js","webpack://www/./src/constants/motion.ts","webpack://www/./src/components/blocks/motion-box.tsx","webpack://www/./src/components/typography/heading.tsx","webpack://www/./src/components/writing/card.tsx","webpack://www/./src/components/writing/subnavigation.tsx","webpack://www/./src/hooks/use-categories.tsx","webpack://www/./src/constants/space.ts","webpack://www/./src/pages/writing.tsx"],"sourcesContent":["import { useTheme } from '@chakra-ui/system';\nimport { isBrowser, __DEV__, memoizedGet, isNumber, breakpoints, isArray, fromEntries, arrayToObjectNotation } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport React__default from 'react';\nimport { useEnvironment } from '@chakra-ui/react-env';\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nfunction useMediaQuery(query) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var isSupported = isBrowser && \"matchMedia\" in env.window;\n\n  var _React$useState = React.useState(queries.map(function (query) {\n    return isSupported ? !!env.window.matchMedia(query).matches : false;\n  })),\n      matches = _React$useState[0],\n      setMatches = _React$useState[1];\n\n  useSafeLayoutEffect(function () {\n    if (!isSupported) return undefined;\n    var mediaQueryList = queries.map(function (query) {\n      return env.window.matchMedia(query);\n    });\n    var listenerList = mediaQueryList.map(function () {\n      var listener = function listener() {\n        var isEqual = function isEqual(prev, curr) {\n          return prev.length === curr.length && prev.every(function (elem, idx) {\n            return elem === curr[idx];\n          });\n        };\n\n        var currentMatches = mediaQueryList.map(function (mediaQuery) {\n          return mediaQuery.matches;\n        });\n\n        if (!isEqual(matches, currentMatches)) {\n          setMatches(currentMatches);\n        }\n      };\n\n      env.window.addEventListener(\"resize\", listener);\n      return listener;\n    });\n    return function () {\n      mediaQueryList.forEach(function (_, index) {\n        env.window.removeEventListener(\"resize\", listenerList[index]);\n      });\n    };\n  }, [query]);\n  return matches;\n}\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\n\n\nvar Visibility = function Visibility(props) {\n  var breakpoint = props.breakpoint,\n      hide = props.hide,\n      children = props.children;\n\n  var _useMediaQuery = useMediaQuery(breakpoint),\n      show = _useMediaQuery[0];\n\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\n\nvar Hide = function Hide(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\n\nvar Show = function Show(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\n\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\n\nvar getBreakpoint = function getBreakpoint(theme, value) {\n  return memoizedGet(theme, \"breakpoints.\" + value, value);\n};\n\nfunction useQuery(props) {\n  var _props$breakpoint = props.breakpoint,\n      breakpoint = _props$breakpoint === void 0 ? \"\" : _props$breakpoint,\n      below = props.below,\n      above = props.above;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n\n  return query;\n}\n/**\n * React hook used to get the user's animation preference.\n */\n\n\nfunction usePrefersReducedMotion() {\n  var _useMediaQuery = useMediaQuery(\"(prefers-reduced-motion: reduce)\"),\n      prefersReducedMotion = _useMediaQuery[0];\n\n  return prefersReducedMotion;\n}\n/**\n * React hook for getting the user's color mode preference.\n */\n\n\nfunction useColorModePreference() {\n  var _useMediaQuery2 = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"]),\n      isLight = _useMediaQuery2[0],\n      isDark = _useMediaQuery2[1];\n\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return undefined;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction createMediaQueries(breakpoints) {\n  return Object.entries(breakpoints) // sort css units in ascending order to ensure media queries are generated\n  // in the correct order and reference to each other correctly aswell\n  .sort(function (a, b) {\n    return Number.parseInt(a[1], 10) > Number.parseInt(b[1], 10) ? 1 : -1;\n  }).map(function (_ref, index, arr) {\n    var breakpoint = _ref[0],\n        minWidth = _ref[1]; // given a following breakpoint\n\n    var next = arr[index + 1]; // this breakpoint must end prior the threshold of the next\n\n    var maxWidth = next ? next[1] : undefined;\n    var query = createMediaQueryString(minWidth, maxWidth);\n    return {\n      minWidth: minWidth,\n      maxWidth: maxWidth,\n      breakpoint: breakpoint,\n      query: query\n    };\n  });\n}\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\n\n\nfunction createMediaQueryString(minWidth, maxWidth) {\n  var hasMinWidth = parseInt(minWidth, 10) >= 0;\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\";\n  }\n\n  var query = \"(min-width: \" + toMediaString(minWidth) + \")\";\n\n  if (!maxWidth) {\n    return query;\n  }\n\n  if (query) {\n    query += \" and \";\n  }\n\n  query += \"(max-width: \" + toMediaString(subtract(maxWidth)) + \")\";\n  return query;\n}\n\nvar measurementRegex = /([0-9]+\\.?[0-9]*)/;\n\nvar calculateMeasurement = function calculateMeasurement(value, modifier) {\n  if (typeof value === \"number\") {\n    return \"\" + (value + modifier);\n  }\n\n  return value.replace(measurementRegex, function (match) {\n    return \"\" + (parseFloat(match) + modifier);\n  });\n};\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\n\n\nfunction subtract(value) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01);\n}\n/**\n * Convert media query value to string\n */\n\n\nfunction toMediaString(value) {\n  return isNumber(value) ? value + \"px\" : value;\n}\n\nvar _excluded = [\"query\"],\n    _excluded2 = [\"query\"];\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\nfunction useBreakpoint(defaultBreakpoint) {\n  var _useTheme = useTheme(),\n      breakpoints = _useTheme.breakpoints;\n\n  var env = useEnvironment();\n  var mediaQueries = React__default.useMemo(function () {\n    return createMediaQueries(_extends({\n      base: \"0px\"\n    }, breakpoints));\n  }, [breakpoints]);\n\n  var _React$useState = React__default.useState(function () {\n    if (!defaultBreakpoint) {\n      return undefined;\n    }\n\n    var mediaQuery = mediaQueries.find(function (_ref) {\n      var breakpoint = _ref.breakpoint;\n      return breakpoint === defaultBreakpoint;\n    });\n\n    if (mediaQuery) {\n      mediaQuery.query;\n\n      var breakpoint = _objectWithoutPropertiesLoose(mediaQuery, _excluded);\n\n      return breakpoint;\n    }\n\n    return undefined;\n  }),\n      currentBreakpoint = _React$useState[0],\n      setCurrentBreakpoint = _React$useState[1];\n\n  var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;\n  var update = React__default.useCallback(function (query, breakpoint) {\n    if (query.matches && current !== breakpoint.breakpoint) {\n      setCurrentBreakpoint(breakpoint);\n    }\n  }, [current]);\n  React__default.useEffect(function () {\n    var listeners = new Set();\n    mediaQueries.forEach(function (_ref2) {\n      var query = _ref2.query,\n          breakpoint = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n      var mediaQuery = env.window.matchMedia(query); // trigger an initial update to determine media query\n\n      update(mediaQuery, breakpoint);\n\n      var handleChange = function handleChange() {\n        update(mediaQuery, breakpoint);\n      }; // add media query-listener\n\n\n      mediaQuery.addListener(handleChange); // push the media query list handleChange\n      // so we can use it to remove Listener\n\n      listeners.add({\n        mediaQuery: mediaQuery,\n        handleChange: handleChange\n      });\n      return function () {\n        // clean up 1\n        mediaQuery.removeListener(handleChange);\n      };\n    });\n    return function () {\n      // clean up 2: for safety\n      listeners.forEach(function (_ref3) {\n        var mediaQuery = _ref3.mediaQuery,\n            handleChange = _ref3.handleChange;\n        mediaQuery.removeListener(handleChange);\n      });\n      listeners.clear();\n    };\n  }, [mediaQueries, breakpoints, update, env.window]);\n  return current;\n}\n\nfunction getClosestValue(values, breakpoint, breakpoints$1) {\n  if (breakpoints$1 === void 0) {\n    breakpoints$1 = breakpoints;\n  }\n\n  var index = Object.keys(values).indexOf(breakpoint);\n\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n\n  var stopIndex = breakpoints$1.indexOf(breakpoint);\n\n  while (stopIndex >= 0) {\n    var key = breakpoints$1[stopIndex];\n\n    if (values[key] != null) {\n      index = stopIndex;\n      break;\n    }\n\n    stopIndex -= 1;\n  }\n\n  if (index !== -1) {\n    var _key = breakpoints$1[index];\n    return values[_key];\n  }\n\n  return undefined;\n}\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @param values\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\n\nfunction useBreakpointValue(values, defaultBreakpoint) {\n  var breakpoint = useBreakpoint(defaultBreakpoint);\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Object.keys(theme.breakpoints);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(function (_ref) {\n    var key = _ref[0],\n        value = _ref[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { Hide, Show, useBreakpoint, useBreakpointValue, useColorModePreference, useMediaQuery, usePrefersReducedMotion, useQuery };","export const transforms = {\n  beforeHover: {\n    transform: `translate3d(0, 0, 0)`,\n    transition: `transform 0.4s cubic-bezier(0.34, 1.56, 0.64, 1), box-shadow 0.4s cubic-bezier(0.34, 1.56, 0.64, 1)`,\n  },\n  onHover: {\n    transform: `translate3d(0, -8px, 0)`,\n    boxShadow: `0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)`,\n  },\n}\n","import * as React from \"react\"\nimport { Box, BoxProps, usePrefersReducedMotion } from \"@chakra-ui/react\"\nimport { transforms } from \"../../constants/motion\"\n\nexport const MotionBox: React.FC<BoxProps> = ({ children, ...rest }) => {\n  const shouldReduceMotion = usePrefersReducedMotion()\n\n  return (\n    <Box\n      transition={transforms.beforeHover.transition}\n      transform={transforms.beforeHover.transform}\n      _hover={\n        shouldReduceMotion ? {} : { transform: transforms.onHover.transform, boxShadow: transforms.onHover.boxShadow }\n      }\n      {...rest}\n    >\n      {children}\n    </Box>\n  )\n}\n","import * as React from \"react\"\nimport { Heading as ChakraHeading, HeadingProps as ChakraHeadingProps } from \"@chakra-ui/react\"\n\ninterface HeadingProps extends ChakraHeadingProps {\n  as: \"h1\" | \"h2\" | \"h3\" | \"h4\"\n}\n\n/**\n * Heading component accepting heading levels\n * Wraps the Heading component from Chakra\n */\nexport const Heading: React.FC<HeadingProps> = ({ as, children, ...rest }) => (\n  <ChakraHeading as={as} variant={as} {...rest}>\n    {children}\n  </ChakraHeading>\n)\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Text, useColorModeValue } from \"@chakra-ui/react\"\nimport { MotionBox } from \"../blocks/motion-box\"\nimport { Link } from \"../link\"\n\ntype CardProps = {\n  slug: string\n  title: string\n  subtitle?: string\n  description: string\n}\n\nexport const Card: React.FC<CardProps> = ({ slug, title, subtitle, description }) => {\n  const cardBg = useColorModeValue(`brand.cardBg`, `brand.dark.cardBg`)\n  const headingColor = useColorModeValue(`black`, `white`)\n  const headingHoverColor = useColorModeValue(`brand.primary`, `brand.dark.primary`)\n  const subheadingColor = useColorModeValue(`brand.cardSubheading`, `brand.dark.cardSubheading`)\n\n  return (\n    <MotionBox p={6} borderRadius=\"lg\" boxShadow=\"lg\" bg={cardBg} key={slug} _focusWithin={{ boxShadow: `outline` }}>\n      <Link\n        to={slug}\n        _focus={{ boxShadow: `none`, h2: { color: headingHoverColor } }}\n        _hover={{ textDecoration: `none`, h2: { color: headingHoverColor } }}\n      >\n        <Text as=\"h2\" fontSize=\"1.3125rem\" fontWeight=\"bold\" color={headingColor} transition=\"color 0.3s ease-in-out\">\n          {title}\n        </Text>\n        {subtitle && (\n          <Text as=\"h3\" fontSize=\"1.125rem\" fontWeight=\"medium\" color={subheadingColor}>\n            {subtitle}\n          </Text>\n        )}\n        <Text mt={6}>{description}</Text>\n      </Link>\n    </MotionBox>\n  )\n}\n\nexport const query = graphql`\n  fragment CardPostInformation on Post {\n    title\n    date\n    slug\n    subtitle\n    description\n  }\n`\n","import * as React from \"react\"\nimport { Flex, HStack, useColorModeValue } from \"@chakra-ui/react\"\nimport { useCategories } from \"../../hooks/use-categories\"\nimport { Link } from \"../link\"\n\nexport const WritingSubNavigation: React.FC = () => {\n  const categories = useCategories()\n  const scrollbarBG = useColorModeValue(`blueGray.200`, `blueGray.700`)\n  const thumbBG = useColorModeValue(`blueGray.400`, `blueGray.400`)\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      py=\"2\"\n      data-name=\"subnavigation\"\n      sx={{\n        overflowX: `auto`,\n        overflowY: `hidden`,\n        scrollbarWidth: `thin`,\n        scrollbarColor: `${thumbBG} ${scrollbarBG}`,\n        \"::-webkit-scrollbar\": {\n          height: `12px`,\n        },\n        \"::-webkit-scrollbar-track\": {\n          background: scrollbarBG,\n          borderRadius: `6px`,\n        },\n        \"::-webkit-scrollbar-thumb\": {\n          backgroundColor: thumbBG,\n          borderRadius: `8px`,\n          borderWidth: `3px`,\n          borderStyle: `solid`,\n          borderColor: scrollbarBG,\n        },\n      }}\n    >\n      <HStack as=\"ul\" listStyleType=\"none\" spacing=\"2\" ml=\"-2\">\n        <li>\n          <Link\n            to=\"/writing\"\n            fontSize=\"md\"\n            p=\"2\"\n            activeClassName=\"active\"\n            sx={{ \"&.active\": { fontWeight: `semibold` } }}\n          >\n            Latest\n          </Link>\n        </li>\n        <li>\n          <Link\n            to=\"/tutorials\"\n            fontSize=\"md\"\n            p=\"2\"\n            activeClassName=\"active\"\n            sx={{ \"&.active\": { fontWeight: `semibold` } }}\n          >\n            Tutorials\n          </Link>\n        </li>\n        {categories.map((item) => (\n          <li key={item.slug}>\n            <Link\n              to={item.slug}\n              fontSize=\"md\"\n              p=\"2\"\n              activeClassName=\"active\"\n              sx={{ \"&.active\": { fontWeight: `semibold` } }}\n            >\n              {item.name}\n            </Link>\n          </li>\n        ))}\n      </HStack>\n    </Flex>\n  )\n}\n","import { graphql, useStaticQuery } from \"gatsby\"\n\ntype CategoryQueryResult = {\n  allCategory: {\n    nodes: {\n      name: string\n      slug: string\n    }[]\n  }\n}\n\nexport const useCategories = () => {\n  const data = useStaticQuery<CategoryQueryResult>(graphql`\n    {\n      allCategory(sort: { fields: name, order: ASC }) {\n        nodes {\n          name\n          slug\n        }\n      }\n    }\n  `)\n\n  return data.allCategory.nodes\n}\n","export const space = {\n  paddingLarge: [20, 24, null, 40, 48],\n  paddingMedium: [16, 24, null, 36, 40],\n  paddingSmall: [12, 16, null, 24, 28],\n}\n","import * as React from \"react\"\nimport { PageProps, graphql } from \"gatsby\"\nimport { Container, Stack, Text, Grid, Link as ChakraLink } from \"@chakra-ui/react\"\nimport { Layout } from \"../components/blocks/layout\"\nimport { SkipNavContent } from \"../components/a11y/skip-nav\"\nimport { WritingSubNavigation } from \"../components/writing/subnavigation\"\nimport { Heading } from \"../components/typography/heading\"\nimport { Link } from \"../components/link\"\nimport { space } from \"../constants/space\"\nimport { Card } from \"../components/writing/card\"\nimport { SEO } from \"../components/seo\"\n\ntype WritingProps = {\n  posts: {\n    nodes: {\n      title: string\n      date: string\n      slug: string\n      subtitle: string\n      description: string\n    }[]\n    totalCount: number\n  }\n}\n\nconst Writing: React.FC<PageProps<WritingProps>> = ({ data: { posts } }) => (\n  <Layout subnavigation={<WritingSubNavigation />}>\n    <SEO title=\"Writing\" breadcrumbListItems={[{ name: `Writing`, url: `/writing` }]} />\n    <SkipNavContent>\n      <Container py={space.paddingMedium}>\n        <Stack spacing=\"20\" align=\"center\">\n          <Stack spacing=\"3\" align=\"center\">\n            <Heading as=\"h1\">Writing</Heading>\n            <Text variant=\"prominent\" maxWidth=\"45ch\" textAlign=\"center\">\n              So far I’ve written {posts.totalCount} longform tutorials & articles. For more compact content visit my\n              {` `}\n              <Link to=\"/garden\">Digital Garden</Link>. <ChakraLink href=\"/rss.xml\">RSS</ChakraLink>.\n            </Text>\n          </Stack>\n          <Grid\n            gridTemplateColumns={[`1fr`, null, `repeat(2, 1fr)`]}\n            gap={8}\n            width={[`100%`, null, null, `calc(100% + 3rem)`]}\n          >\n            {posts.nodes.map((post) => (\n              <Card\n                key={post.slug}\n                slug={post.slug}\n                title={post.title}\n                subtitle={post.subtitle}\n                description={post.description}\n              />\n            ))}\n          </Grid>\n        </Stack>\n      </Container>\n    </SkipNavContent>\n  </Layout>\n)\n\nexport default Writing\n\nexport const query = graphql`\n  {\n    posts: allPost(filter: { published: { eq: true } }, sort: { fields: date, order: DESC }) {\n      nodes {\n        ...CardPostInformation\n      }\n      totalCount\n    }\n  }\n`\n"],"names":["useSafeLayoutEffect","useMediaQuery","query","env","queries","Array","isArray","isSupported","window","_React$useState","map","matchMedia","matches","setMatches","mediaQueryList","listenerList","listener","prev","curr","currentMatches","mediaQuery","length","every","elem","idx","addEventListener","forEach","_","index","removeEventListener","usePrefersReducedMotion","transforms","transform","transition","boxShadow","MotionBox","children","rest","shouldReduceMotion","_hover","Heading","as","variant","Card","slug","title","subtitle","description","cardBg","useColorModeValue","headingColor","headingHoverColor","subheadingColor","p","borderRadius","bg","key","_focusWithin","to","_focus","h2","color","textDecoration","fontSize","fontWeight","mt","WritingSubNavigation","categories","useStaticQuery","allCategory","nodes","scrollbarBG","thumbBG","alignItems","py","sx","overflowX","overflowY","scrollbarWidth","scrollbarColor","height","background","backgroundColor","borderWidth","borderStyle","borderColor","listStyleType","spacing","ml","activeClassName","item","name","space","paddingLarge","paddingMedium","paddingSmall","posts","data","subnavigation","breadcrumbListItems","url","align","maxWidth","textAlign","totalCount","href","gridTemplateColumns","gap","width","post"],"sourceRoot":""}