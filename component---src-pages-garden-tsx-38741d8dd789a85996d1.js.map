{"version":3,"file":"component---src-pages-garden-tsx-38741d8dd789a85996d1.js","mappings":"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","sources":["webpack://www/../node_modules/@chakra-ui/media-query/dist/chakra-ui-media-query.esm.js","webpack://www/../node_modules/@chakra-ui/tag/dist/chakra-ui-tag.esm.js","webpack://www/./src/components/typography/heading.tsx","webpack://www/./src/constants/space.ts","webpack://www/./src/pages/garden.tsx"],"sourcesContent":["import { useTheme } from '@chakra-ui/system';\nimport { isBrowser, __DEV__, memoizedGet, isNumber, breakpoints, isArray, fromEntries, arrayToObjectNotation } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport React__default from 'react';\nimport { useEnvironment } from '@chakra-ui/react-env';\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nfunction useMediaQuery(query) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var isSupported = isBrowser && \"matchMedia\" in env.window;\n\n  var _React$useState = React.useState(queries.map(function (query) {\n    return isSupported ? !!env.window.matchMedia(query).matches : false;\n  })),\n      matches = _React$useState[0],\n      setMatches = _React$useState[1];\n\n  useSafeLayoutEffect(function () {\n    if (!isSupported) return undefined;\n    var mediaQueryList = queries.map(function (query) {\n      return env.window.matchMedia(query);\n    });\n    var listenerList = mediaQueryList.map(function () {\n      var listener = function listener() {\n        var isEqual = function isEqual(prev, curr) {\n          return prev.length === curr.length && prev.every(function (elem, idx) {\n            return elem === curr[idx];\n          });\n        };\n\n        var currentMatches = mediaQueryList.map(function (mediaQuery) {\n          return mediaQuery.matches;\n        });\n\n        if (!isEqual(matches, currentMatches)) {\n          setMatches(currentMatches);\n        }\n      };\n\n      env.window.addEventListener(\"resize\", listener);\n      return listener;\n    });\n    return function () {\n      mediaQueryList.forEach(function (_, index) {\n        env.window.removeEventListener(\"resize\", listenerList[index]);\n      });\n    };\n  }, [query]);\n  return matches;\n}\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\n\n\nvar Visibility = function Visibility(props) {\n  var breakpoint = props.breakpoint,\n      hide = props.hide,\n      children = props.children;\n\n  var _useMediaQuery = useMediaQuery(breakpoint),\n      show = _useMediaQuery[0];\n\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\n\nvar Hide = function Hide(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\n\nvar Show = function Show(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\n\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\n\nvar getBreakpoint = function getBreakpoint(theme, value) {\n  return memoizedGet(theme, \"breakpoints.\" + value, value);\n};\n\nfunction useQuery(props) {\n  var _props$breakpoint = props.breakpoint,\n      breakpoint = _props$breakpoint === void 0 ? \"\" : _props$breakpoint,\n      below = props.below,\n      above = props.above;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n\n  return query;\n}\n/**\n * React hook used to get the user's animation preference.\n */\n\n\nfunction usePrefersReducedMotion() {\n  var _useMediaQuery = useMediaQuery(\"(prefers-reduced-motion: reduce)\"),\n      prefersReducedMotion = _useMediaQuery[0];\n\n  return prefersReducedMotion;\n}\n/**\n * React hook for getting the user's color mode preference.\n */\n\n\nfunction useColorModePreference() {\n  var _useMediaQuery2 = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"]),\n      isLight = _useMediaQuery2[0],\n      isDark = _useMediaQuery2[1];\n\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return undefined;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction createMediaQueries(breakpoints) {\n  return Object.entries(breakpoints) // sort css units in ascending order to ensure media queries are generated\n  // in the correct order and reference to each other correctly aswell\n  .sort(function (a, b) {\n    return Number.parseInt(a[1], 10) > Number.parseInt(b[1], 10) ? 1 : -1;\n  }).map(function (_ref, index, arr) {\n    var breakpoint = _ref[0],\n        minWidth = _ref[1]; // given a following breakpoint\n\n    var next = arr[index + 1]; // this breakpoint must end prior the threshold of the next\n\n    var maxWidth = next ? next[1] : undefined;\n    var query = createMediaQueryString(minWidth, maxWidth);\n    return {\n      minWidth: minWidth,\n      maxWidth: maxWidth,\n      breakpoint: breakpoint,\n      query: query\n    };\n  });\n}\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\n\n\nfunction createMediaQueryString(minWidth, maxWidth) {\n  var hasMinWidth = parseInt(minWidth, 10) >= 0;\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\";\n  }\n\n  var query = \"(min-width: \" + toMediaString(minWidth) + \")\";\n\n  if (!maxWidth) {\n    return query;\n  }\n\n  if (query) {\n    query += \" and \";\n  }\n\n  query += \"(max-width: \" + toMediaString(subtract(maxWidth)) + \")\";\n  return query;\n}\n\nvar measurementRegex = /([0-9]+\\.?[0-9]*)/;\n\nvar calculateMeasurement = function calculateMeasurement(value, modifier) {\n  if (typeof value === \"number\") {\n    return \"\" + (value + modifier);\n  }\n\n  return value.replace(measurementRegex, function (match) {\n    return \"\" + (parseFloat(match) + modifier);\n  });\n};\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\n\n\nfunction subtract(value) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01);\n}\n/**\n * Convert media query value to string\n */\n\n\nfunction toMediaString(value) {\n  return isNumber(value) ? value + \"px\" : value;\n}\n\nvar _excluded = [\"query\"],\n    _excluded2 = [\"query\"];\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\nfunction useBreakpoint(defaultBreakpoint) {\n  var _useTheme = useTheme(),\n      breakpoints = _useTheme.breakpoints;\n\n  var env = useEnvironment();\n  var mediaQueries = React__default.useMemo(function () {\n    return createMediaQueries(_extends({\n      base: \"0px\"\n    }, breakpoints));\n  }, [breakpoints]);\n\n  var _React$useState = React__default.useState(function () {\n    if (!defaultBreakpoint) {\n      return undefined;\n    }\n\n    var mediaQuery = mediaQueries.find(function (_ref) {\n      var breakpoint = _ref.breakpoint;\n      return breakpoint === defaultBreakpoint;\n    });\n\n    if (mediaQuery) {\n      mediaQuery.query;\n\n      var breakpoint = _objectWithoutPropertiesLoose(mediaQuery, _excluded);\n\n      return breakpoint;\n    }\n\n    return undefined;\n  }),\n      currentBreakpoint = _React$useState[0],\n      setCurrentBreakpoint = _React$useState[1];\n\n  var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;\n  var update = React__default.useCallback(function (query, breakpoint) {\n    if (query.matches && current !== breakpoint.breakpoint) {\n      setCurrentBreakpoint(breakpoint);\n    }\n  }, [current]);\n  React__default.useEffect(function () {\n    var listeners = new Set();\n    mediaQueries.forEach(function (_ref2) {\n      var query = _ref2.query,\n          breakpoint = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n      var mediaQuery = env.window.matchMedia(query); // trigger an initial update to determine media query\n\n      update(mediaQuery, breakpoint);\n\n      var handleChange = function handleChange() {\n        update(mediaQuery, breakpoint);\n      }; // add media query-listener\n\n\n      mediaQuery.addListener(handleChange); // push the media query list handleChange\n      // so we can use it to remove Listener\n\n      listeners.add({\n        mediaQuery: mediaQuery,\n        handleChange: handleChange\n      });\n      return function () {\n        // clean up 1\n        mediaQuery.removeListener(handleChange);\n      };\n    });\n    return function () {\n      // clean up 2: for safety\n      listeners.forEach(function (_ref3) {\n        var mediaQuery = _ref3.mediaQuery,\n            handleChange = _ref3.handleChange;\n        mediaQuery.removeListener(handleChange);\n      });\n      listeners.clear();\n    };\n  }, [mediaQueries, breakpoints, update, env.window]);\n  return current;\n}\n\nfunction getClosestValue(values, breakpoint, breakpoints$1) {\n  if (breakpoints$1 === void 0) {\n    breakpoints$1 = breakpoints;\n  }\n\n  var index = Object.keys(values).indexOf(breakpoint);\n\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n\n  var stopIndex = breakpoints$1.indexOf(breakpoint);\n\n  while (stopIndex >= 0) {\n    var key = breakpoints$1[stopIndex];\n\n    if (values[key] != null) {\n      index = stopIndex;\n      break;\n    }\n\n    stopIndex -= 1;\n  }\n\n  if (index !== -1) {\n    var _key = breakpoints$1[index];\n    return values[_key];\n  }\n\n  return undefined;\n}\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @param values\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\n\nfunction useBreakpointValue(values, defaultBreakpoint) {\n  var breakpoint = useBreakpoint(defaultBreakpoint);\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Object.keys(theme.breakpoints);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(function (_ref) {\n    var key = _ref[0],\n        value = _ref[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { Hide, Show, useBreakpoint, useBreakpointValue, useColorModePreference, useMediaQuery, usePrefersReducedMotion, useQuery };","import { Icon } from '@chakra-ui/icon';\nimport { forwardRef, useMultiStyleConfig, omitThemingProps, StylesProvider, chakra, useStyles } from '@chakra-ui/system';\nimport { __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar _excluded = [\"isDisabled\", \"children\"];\n/**\n * The tag component is used to label or categorize UI elements.\n * To style the tag globally, change the styles in `theme.components.Tag`\n * @see Docs https://chakra-ui.com/tag\n */\n\nvar Tag = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Tag\", props);\n  var ownProps = omitThemingProps(props);\n\n  var containerStyles = _extends({\n    display: \"inline-flex\",\n    verticalAlign: \"top\",\n    alignItems: \"center\",\n    maxWidth: \"100%\"\n  }, styles.container);\n\n  return /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.span, _extends({\n    ref: ref\n  }, ownProps, {\n    __css: containerStyles\n  })));\n});\n\nif (__DEV__) {\n  Tag.displayName = \"Tag\";\n}\n\nvar TagLabel = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    ref: ref,\n    isTruncated: true\n  }, props, {\n    __css: styles.label\n  }));\n});\n\nif (__DEV__) {\n  TagLabel.displayName = \"TagLabel\";\n}\n\nvar TagLeftIcon = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(Icon, _extends({\n    ref: ref,\n    verticalAlign: \"top\",\n    marginEnd: \"0.5rem\"\n  }, props));\n});\n\nif (__DEV__) {\n  TagLeftIcon.displayName = \"TagLeftIcon\";\n}\n\nvar TagRightIcon = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(Icon, _extends({\n    ref: ref,\n    verticalAlign: \"top\",\n    marginStart: \"0.5rem\"\n  }, props));\n});\n\nif (__DEV__) {\n  TagRightIcon.displayName = \"TagRightIcon\";\n}\n\nvar TagCloseIcon = function TagCloseIcon(props) {\n  return /*#__PURE__*/React.createElement(Icon, _extends({\n    verticalAlign: \"inherit\",\n    viewBox: \"0 0 512 512\"\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"\n  }));\n};\n\nif (__DEV__) {\n  TagCloseIcon.displayName = \"TagCloseIcon\";\n}\n/**\n * TagCloseButton is used to close \"remove\" the tag\n * @see Docs https://chakra-ui.com/tag\n */\n\n\nvar TagCloseButton = function TagCloseButton(props) {\n  var isDisabled = props.isDisabled,\n      children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var styles = useStyles();\n\n  var btnStyles = _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    outline: \"0\"\n  }, styles.closeButton);\n\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({}, rest, {\n    type: \"button\",\n    \"aria-label\": \"close\",\n    disabled: isDisabled,\n    __css: btnStyles\n  }), children || /*#__PURE__*/React.createElement(TagCloseIcon, null));\n};\n\nif (__DEV__) {\n  TagCloseButton.displayName = \"TagCloseButton\";\n}\n\nexport { Tag, TagCloseButton, TagLabel, TagLeftIcon, TagRightIcon };","import * as React from \"react\"\nimport { Heading as ChakraHeading, HeadingProps as ChakraHeadingProps } from \"@chakra-ui/react\"\n\ninterface HeadingProps extends ChakraHeadingProps {\n  as: \"h1\" | \"h2\" | \"h3\" | \"h4\"\n}\n\n/**\n * Heading component accepting heading levels\n * Wraps the Heading component from Chakra\n */\nexport const Heading: React.FC<HeadingProps> = ({ as, children, ...rest }) => (\n  <ChakraHeading as={as} variant={as} {...rest}>\n    {children}\n  </ChakraHeading>\n)\n","export const space = {\n  paddingLarge: [20, 24, null, 40, 48],\n  paddingMedium: [16, 24, null, 36, 40],\n  paddingSmall: [12, 16, null, 24, 28],\n}\n","import * as React from \"react\"\nimport { graphql, PageProps } from \"gatsby\"\nimport { BsArrowRight } from \"react-icons/bs\"\nimport {\n  Container,\n  Tag,\n  TagLabel,\n  TagCloseButton,\n  Wrap,\n  WrapItem,\n  Heading as ChakraHeading,\n  Stack,\n  Text,\n  Box,\n  useColorModeValue,\n  usePrefersReducedMotion,\n} from \"@chakra-ui/react\"\nimport { Layout } from \"../components/blocks/layout\"\nimport { Link } from \"../components/link\"\nimport { SkipNavContent } from \"../components/a11y/skip-nav\"\nimport { space } from \"../constants/space\"\nimport { Heading } from \"../components/typography/heading\"\nimport { Spacer } from \"../components/blocks/spacer\"\nimport { SEO } from \"../components/seo\"\n\ntype DataProps = {\n  garden: {\n    group: {\n      title: string\n    }[]\n    nodes: {\n      title: string\n      slug: string\n      icon: string\n      lastUpdated: string\n      tags: string[]\n    }[]\n  }\n}\n\ninterface State {\n  tags: string[]\n}\n\ntype Action = { type: `ADD_TAG`; payload: string } | { type: `REMOVE_TAG`; payload: string }\n\nconst initialState: State = {\n  tags: [],\n}\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case `ADD_TAG`:\n      return { ...state, tags: state.tags.concat(action.payload) }\n    case `REMOVE_TAG`:\n      return { ...state, tags: state.tags.filter((tag) => tag !== action.payload) }\n    default:\n      throw new Error(`Unknown action passed to filter reducer`)\n  }\n}\n\nconst Garden: React.FC<PageProps<DataProps>> = ({ data: { garden } }) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n  const prefersReducedMotion = usePrefersReducedMotion()\n  const dividerColor = useColorModeValue(`blueGray.100`, `blueGray.800`)\n  const bgHoverColor = useColorModeValue(`blueGray.100`, `blueGray.800`)\n  const prominentLink = useColorModeValue(`brand.heading`, `brand.dark.heading`)\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Digital Garden\"\n        description=\"I understand my Digital Garden as a collection of free form, interconnected & evolving ideas that grow over time. Like plants grow in a real-world garden.\"\n        image=\"/social/digital-garden.png\"\n        breadcrumbListItems={[{ name: `Digital Garden`, url: `/garden` }]}\n      />\n      <SkipNavContent>\n        <Container py={space.paddingSmall}>\n          <Heading as=\"h1\">Digital Garden</Heading>\n          <Text textStyle=\"prominent\">\n            <Link to=\"/garden/what-is-a-digital-garden\" color={prominentLink}>\n              What is a Digital Garden?\n            </Link>\n            {` `}\n            Select tags to filter posts:\n          </Text>\n          <Spacer size={6} axis=\"vertical\" />\n          <Wrap>\n            {garden.group.map((tag) => {\n              const isActive = state.tags.includes(tag.title)\n\n              return (\n                <WrapItem\n                  as=\"button\"\n                  onClick={() => {\n                    if (state.tags.includes(tag.title)) {\n                      dispatch({ type: `REMOVE_TAG`, payload: tag.title })\n                    } else {\n                      dispatch({ type: `ADD_TAG`, payload: tag.title })\n                    }\n                  }}\n                  borderRadius=\"md\"\n                  _hover={{\n                    cursor: `pointer`,\n                  }}\n                  _focus={{\n                    boxShadow: `outline`,\n                    outline: `none`,\n                  }}\n                  key={tag.title}\n                >\n                  <Tag colorScheme={isActive ? `blue` : `gray`} size=\"lg\">\n                    <TagLabel>{tag.title}</TagLabel>\n                    {isActive && <TagCloseButton as=\"span\" aria-hidden aria-label=\"\" />}\n                  </Tag>\n                </WrapItem>\n              )\n            })}\n          </Wrap>\n          <Spacer size={20} axis=\"vertical\" />\n          <Stack\n            spacing={0}\n            divider={<Spacer axis=\"horizontal\" size=\"100%\" bg={dividerColor} border=\"none\" />}\n            mx={[`-2`, null, null, `-6`]}\n          >\n            {garden.nodes\n              .filter(({ tags = [] }) => {\n                if (state.tags.length === 0) {\n                  return true\n                }\n                return state.tags.some((tag) => tags.includes(tag))\n              })\n              .sort((aPost, bPost) => {\n                const a = new Date(aPost.lastUpdated)\n                const b = new Date(bPost.lastUpdated)\n\n                // eslint-disable-next-line no-nested-ternary\n                return a > b ? -1 : a < b ? 1 : 0\n              })\n              .map((post) => (\n                <Link\n                  to={post.slug}\n                  key={post.slug}\n                  display=\"grid\"\n                  gridTemplateColumns={[`25px 1fr 20px`, `35px 1fr 20px`, null, `50px 1fr 24px`]}\n                  alignItems=\"center\"\n                  gridGap={6}\n                  px={[2, null, null, 6]}\n                  py={[2, null, null, 6]}\n                  borderRadius=\"lg\"\n                  _hover={{\n                    textDecoration: `none`,\n                    backgroundColor: bgHoverColor,\n                  }}\n                  sx={{\n                    span: {\n                      transform: `translate3d(0px, 0px, 0px)`,\n                      transition: `transform .3s cubic-bezier(.73,.26,.42,1.24)`,\n                    },\n                    \"&:hover\": {\n                      span: {\n                        transform: prefersReducedMotion ? undefined : `translate3d(6px, 0px, 0px)`,\n                      },\n                    },\n                    svg: {\n                      height: [`1.25em`, null, null, `1.5em`],\n                      width: [`1.25em`, null, null, `1.5em`],\n                    },\n                  }}\n                >\n                  <Box width={[25, 35, null, 50]} height={[25, 35, null, 50]}>\n                    <img alt=\"\" src={`/icons/${post.icon}.svg`} width=\"100%\" height=\"100%\" />\n                  </Box>\n                  <Box>\n                    <ChakraHeading as=\"h2\" variant=\"gardenItem\">\n                      {post.title}\n                    </ChakraHeading>\n                    <Text fontSize={[`14px`, null, null, `1rem`]}>{post.lastUpdated}</Text>\n                  </Box>\n                  <span>\n                    <BsArrowRight />\n                  </span>\n                </Link>\n              ))}\n          </Stack>\n        </Container>\n      </SkipNavContent>\n    </Layout>\n  )\n}\n\nexport default Garden\n\nexport const query = graphql`\n  {\n    garden: allGarden(sort: { fields: lastUpdated, order: DESC }) {\n      group(field: tags) {\n        title: fieldValue\n      }\n      nodes {\n        title\n        slug\n        icon\n        lastUpdated(formatString: \"MMM DD, YYYY\")\n        tags\n      }\n    }\n  }\n`\n"],"names":["useSafeLayoutEffect","useMediaQuery","query","env","queries","Array","isArray","isSupported","window","_React$useState","map","matchMedia","matches","setMatches","mediaQueryList","listenerList","listener","prev","curr","currentMatches","mediaQuery","length","every","elem","idx","addEventListener","forEach","_","index","removeEventListener","usePrefersReducedMotion","_extends","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_excluded","Tag","props","ref","styles","ownProps","containerStyles","display","verticalAlign","alignItems","maxWidth","container","value","__css","displayName","TagLabel","isTruncated","label","TagLeftIcon","marginEnd","TagRightIcon","marginStart","TagCloseIcon","viewBox","fill","d","TagCloseButton","isDisabled","children","rest","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","btnStyles","justifyContent","outline","closeButton","type","disabled","Heading","as","variant","space","paddingLarge","paddingMedium","paddingSmall","initialState","tags","reducer","state","action","concat","payload","filter","tag","Error","garden","data","React","dispatch","prefersReducedMotion","dividerColor","useColorModeValue","bgHoverColor","prominentLink","title","description","image","breadcrumbListItems","name","url","py","textStyle","to","color","size","axis","group","isActive","includes","onClick","borderRadius","_hover","cursor","_focus","boxShadow","colorScheme","spacing","divider","bg","border","mx","nodes","some","sort","aPost","bPost","a","Date","lastUpdated","b","post","slug","gridTemplateColumns","gridGap","px","textDecoration","backgroundColor","sx","span","transform","transition","undefined","svg","height","width","alt","src","icon","fontSize"],"sourceRoot":""}