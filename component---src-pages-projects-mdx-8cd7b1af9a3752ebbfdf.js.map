{"version":3,"file":"component---src-pages-projects-mdx-8cd7b1af9a3752ebbfdf.js","mappings":"oPASaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAE5E,SAAC,IAAD,CAAKC,MAAM,WAAWC,YAAY,yGAAyGC,oBAAqB,CAAC,CAC/JC,KAAK,WACLC,IAAI,cACFL,QAAQ,SAEZ,eACE,GAAM,YADR,aAGA,eACE,GAAM,mCADR,sCAGA,eACE,GAAM,QADR,SAGA,gEAAiD,cAAGM,WAAW,IAC3D,KAAQ,mIADqC,kCAAjD,8EAEyH,uBAAYA,WAAW,KAAvB,UAFzH,cAGA,eACE,GAAM,eADR,gBAGA,mBAAG,cAAGA,WAAW,IACb,KAAQ,+CADT,gBAAH,oKAE6L,cAAGA,WAAW,IACvM,KAAQ,4EADiL,iBAF7L,ojBAI8kB,uBAAYA,WAAW,KAAvB,aAJ9kB,mFAIstB,cAAGA,WAAW,IAChuB,KAAQ,2EAD0sB,mCAJttB,yEAOA,eACE,GAAM,gCADR,mCAGA,eACE,GAAM,UADR,SAGA,kEAAmD,cAAGA,WAAW,IAC7D,KAAQ,wHADuC,8BAAnD,cAEqD,cAAGA,WAAW,IAC/D,KAAQ,iDADyC,0BAFrD,MAKA,eACE,GAAM,iBADR,gBAGA,gCAAiB,cAAGA,WAAW,IAC3B,KAAQ,0EADK,yBAAjB,gyBAEk0B,cAAGA,WAAW,IAC50B,KAAQ,uGADszB,WAFl0B,mCAKA,eACE,GAAM,gCADR,mCAGA,eACE,GAAM,UADR,SAGA,mBAAG,cAAGA,WAAW,IACb,KAAQ,+GADT,qBAAH,OAEqC,cAAGA,WAAW,IAC/C,KAAQ,0HADyB,gCAFrC,OAIgD,cAAGA,WAAW,IAC1D,KAAQ,6HADoC,mCAJhD,OAMmD,cAAGA,WAAW,IAC7D,KAAQ,sHADuC,8BAGnD,eACE,GAAM,iBADR,gBAGA,uiBAAwhB,cAAGA,WAAW,IACliB,KAAQ,8DAD4gB,gCAAxhB,iHAE0J,cAAGA,WAAW,IACpK,KAAQ,2EAD8I,+DAF1J,6PASJT,EAAWU,gBAAiB","sources":["webpack://www/./src/pages/projects.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { MDXLayout as PageLayout } from \"../components/blocks/mdx-layout\";\nimport { SEO } from \"../components/seo\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = PageLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <SEO title=\"Projects\" description=\"Work Projects and Open Source Contributions explained with technical details and links to source code.\" breadcrumbListItems={[{\n      name: `Projects`,\n      url: `/projects`\n    }]} mdxType=\"SEO\" />\n\n    <h1 {...{\n      \"id\": \"projects\"\n    }}>{`Projects`}</h1>\n    <h2 {...{\n      \"id\": \"fast-refresh-integration-gatsby\"\n    }}>{`Fast Refresh Integration (Gatsby)`}</h2>\n    <h3 {...{\n      \"id\": \"code\"\n    }}>{`Code`}</h3>\n    <p>{`All of the frontend code lives inside the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gatsbyjs/gatsby/tree/d430823842800745107a441d2f6a6029d6b6c1d7/packages/gatsby/cache-dir/fast-refresh-overlay\"\n      }}>{`cache-dir/fast-refresh-overlay`}</a>{` folder, other bits like the webpack config are in other files inside the `}<inlineCode parentName=\"p\">{`gatsby`}</inlineCode>{` package.`}</p>\n    <h3 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/react-refresh\"\n      }}>{`Fast Refresh`}</a>{` is an implementation of Hot Reloading with full support from React. It was the goal to publish the Fast Refresh integration with the release of Gatsby v3 (see `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.gatsbyjs.com/docs/reference/release-notes/v3.0/#fast-refresh\"\n      }}>{`release notes`}</a>{`). So on a tight deadline an accessible, responsive and most importantly helpful modal/error overlay had to be created. Since Fast Refresh relies on stricter “code style” rules (e.g. no anonymous exports, only one export per file) compared to previous Hot Reloading solutions two things had to be done: 1) Ensure that Gatsby’s frontend itself handles all possible files gracefully (e.g. MDX) and 2) that ESLint warnings were added to warn against those now bad code styles. The end result is an accessible modal (with focus trap, correct aria labels, respects `}<inlineCode parentName=\"p\">{`prefers-*`}</inlineCode>{` media queries) showing multiple types of errors. In addition, a public facing `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.gatsbyjs.com/docs/reference/local-development/fast-refresh/\"\n      }}>{`Fast Refresh documentation page`}</a>{` was written to inform users of how it works, limitations, and tips.`}</p>\n    <h2 {...{\n      \"id\": \"file-system-route-api-gatsby\"\n    }}>{`File System Route API (Gatsby)`}</h2>\n    <h3 {...{\n      \"id\": \"code-1\"\n    }}>{`Code`}</h3>\n    <p>{`The relevant code was added to the existing `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gatsbyjs/gatsby/tree/d430823842800745107a441d2f6a6029d6b6c1d7/packages/gatsby-plugin-page-creator\"\n      }}>{`gatsby-plugin-page-creator`}</a>{` package. `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gatsbyjs/gatsby/pull/27424\"\n      }}>{`Pull Request on GitHub`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"description-1\"\n    }}>{`Description`}</h3>\n    <p>{`While the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.gatsbyjs.com/docs/reference/routing/file-system-route-api/\"\n      }}>{`File System Route API`}</a>{` when I took the project over has already been in a beta stage for some weeks there was still much to do. Incorporating the bug reports and feature requests from the community, adding unit & end-to-end tests, writing documentation. A lot of work went into the polishing of this feature and ensuring that most common use cases were covered — since the goal of this new feature was to abstract some lower-level Gatsby APIs away into the filename itself. It greatly improved the DX of Gatsby and lowered the level of entry for each user. Challenges were different encodings/formats of file names, some feature requests from users, and the question of what the final API surface should look like. All the added tests and user interviews cleared a path for finding solutions before the GA release. An `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gatsbyjs/gatsby/tree/d430823842800745107a441d2f6a6029d6b6c1d7/examples/route-api\"\n      }}>{`example`}</a>{` also shows the API in action.`}</p>\n    <h2 {...{\n      \"id\": \"internalization-theme-gatsby\"\n    }}>{`Internalization Theme (Gatsby)`}</h2>\n    <h3 {...{\n      \"id\": \"code-2\"\n    }}>{`Code`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gatsbyjs/themes/tree/692499ec782aae8b47bcd5aafbbe3cc565b9e429/packages/gatsby-theme-i18n\"\n      }}>{`gatsby-theme-i18n`}</a>{` + `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gatsbyjs/themes/tree/692499ec782aae8b47bcd5aafbbe3cc565b9e429/packages/gatsby-theme-i18n-react-intl\"\n      }}>{`gatsby-theme-i18n-react-intl`}</a>{` / `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gatsbyjs/themes/tree/692499ec782aae8b47bcd5aafbbe3cc565b9e429/packages/gatsby-theme-i18n-react-i18next\"\n      }}>{`gatsby-theme-i18n-react-i18next`}</a>{` / `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gatsbyjs/themes/tree/692499ec782aae8b47bcd5aafbbe3cc565b9e429/packages/gatsby-theme-i18n-lingui\"\n      }}>{`gatsby-theme-i18n-lingui`}</a></p>\n    <h3 {...{\n      \"id\": \"description-2\"\n    }}>{`Description`}</h3>\n    <p>{`As lead engineer on the Gatsby internalization (i18n) initiative, I knew right from the start that internationalization and localization are multi-faceted problems requiring an iterative solution process with involvement from the community. To best understand what this process should look like, I needed to identify the current pain points as well what future considerations need to be kept in mind in designing a solution. With these in mind, I started researching the current i18n ecosystem in Gatsby. I published the article `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.gatsbyjs.com/blog/2020-07-13-i18n-pain-points/\"\n      }}>{`Research on i18n with Gatsby`}</a>{` to invite people to give feedback and work together on the identified pain points. The announcement article `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.gatsbyjs.com/blog/2020-07-28-introducing-gatsby-i18n-theme/\"\n      }}>{`Gatsby Goes Global: Announcing Gatsby’s Official i18n Theme`}</a>{` lays out the problems I hit and the solutions I found for integrating third-party libraries together with Gatsby. The users are now able to combine the main theme with a theme of their choice to have instant support for most common i18n use cases.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","PageLayout","MDXContent","components","props","mdxType","title","description","breadcrumbListItems","name","url","parentName","isMDXComponent"],"sourceRoot":""}