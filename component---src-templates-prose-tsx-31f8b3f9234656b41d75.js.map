{"version":3,"file":"component---src-templates-prose-tsx-31f8b3f9234656b41d75.js","mappings":"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","sources":["webpack://www/./src/hooks/use-active-hash.tsx","webpack://www/./src/components/writing/toc.tsx","webpack://www/./src/components/writing/writing-view.tsx","webpack://www/./src/templates/prose.tsx"],"sourcesContent":["import * as React from \"react\"\n\nexport const useActiveHash = (\n  itemIds: string[],\n  options: {\n    root?: Element | null\n    rootMargin?: string\n    thresholds?: ReadonlyArray<number>\n  } = {}\n) => {\n  const [activeHash, setActiveHash] = React.useState(``)\n\n  React.useEffect(() => {\n    if (typeof window === `undefined`) {\n      return\n    }\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            setActiveHash(entry.target.id)\n          }\n        })\n      },\n      { rootMargin: `0% 0% -80% 0%`, ...options }\n    )\n\n    const existingElements = itemIds.map((id) => document.getElementById(id)).filter(Boolean)\n\n    existingElements.forEach((el) => {\n      observer.observe(el)\n    })\n\n    return () => {\n      existingElements.forEach((el) => {\n        observer.unobserve(el)\n      })\n    }\n  }, [itemIds, options])\n\n  return activeHash\n}\n","import * as React from \"react\"\nimport { Box, useColorModeValue, Link } from \"@chakra-ui/react\"\nimport { useActiveHash } from \"../../hooks/use-active-hash\"\n\ntype Item = {\n  url: string\n  title: string\n  items: Item[]\n}\n\nfunction getIds(items: Item[]): string[] {\n  return items.reduce((acc, item) => {\n    if (item.url) {\n      // url has a # as first character, remove it to get the raw CSS-id\n      acc.push(item.url.slice(1))\n    }\n    if (item.items) {\n      acc.push(...getIds(item.items))\n    }\n    return acc\n  }, [])\n}\n\nconst renderItems = ({\n  items,\n  activeId,\n  nested = false,\n  activeColor = `red`,\n}: {\n  items: Item[]\n  activeId: string\n  nested?: boolean\n  activeColor?: string\n}): JSX.Element => (\n  <>\n    {items.map((item) => {\n      const itemId = item.url.slice(1)\n      const isActive = activeId === itemId\n\n      return (\n        <>\n          <Link\n            color={isActive ? activeColor : `inherit`}\n            key={item.url}\n            mt={nested ? 1 : { base: `2`, \"2xl\": `3` }}\n            ml={nested ? 3 : 0}\n            href={item.url}\n          >\n            {item.title}\n          </Link>\n          {item.items && renderItems({ items: item.items, activeId, activeColor, nested: true })}\n        </>\n      )\n    })}\n  </>\n)\n\nexport const Toc = ({ items }) => {\n  const tocHeadingColor = useColorModeValue(`brand.heading`, `brand.dark.heading`)\n  const activeColor = useColorModeValue(`brand.primary`, `brand.dark.primary`)\n  const ids = getIds(items)\n  const activeItemHash = useActiveHash(ids)\n\n  return (\n    <Box\n      as=\"aside\"\n      position={{ base: `relative`, \"2xl\": `sticky` }}\n      maxHeight={{ base: `unset`, \"2xl\": `300px` }}\n      top={{ base: `unset`, \"2xl\": `80px` }}\n      mb={{ base: `16`, \"2xl\": 0 }}\n      fontSize={[`0.875rem`, `1rem`]}\n    >\n      <Box\n        as=\"nav\"\n        display=\"flex\"\n        flexDir=\"column\"\n        mt={{ base: `0rem`, \"2xl\": `1.8em` }}\n        minWidth=\"175px\"\n        maxWidth={{ base: `100%`, \"2xl\": `210px` }}\n        overflow=\"auto\"\n        alignItems=\"flex-start\"\n      >\n        <Box\n          as=\"h2\"\n          color={tocHeadingColor}\n          textTransform=\"uppercase\"\n          fontSize={[`14px`, null, null, `1rem`, null, `14px`]}\n          fontWeight=\"medium\"\n          letterSpacing=\"0.075em\"\n          mb={{ base: `2`, \"2xl\": `4` }}\n        >\n          Table of Contents\n        </Box>\n        {renderItems({ items, activeId: activeItemHash, activeColor })}\n      </Box>\n    </Box>\n  )\n}\n\nexport const WithSidebarWrapper = ({ children, items }) => (\n  <Box\n    display={{ base: `block`, \"2xl\": `flex` }}\n    flexDirection=\"row-reverse\"\n    justifyContent=\"flex-end\"\n    sx={{ gap: `5rem` }}\n  >\n    <Toc items={items} />\n    {children}\n  </Box>\n)\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Box, Container, Divider, Link as ExternalLink, Text, Stack } from \"@chakra-ui/react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\nimport { Layout } from \"../blocks/layout\"\nimport { SEO } from \"../seo\"\nimport { SkipNavContent } from \"../a11y/skip-nav\"\nimport { Spacer } from \"../blocks/spacer\"\nimport { Prose } from \"../typography/prose\"\nimport { components } from \"../mdx\"\nimport { article } from \"../../constants/json-ld\"\nimport { ShareAnywhereButton, TwitterButton } from \"../buttons\"\nimport { site } from \"../../constants/meta\"\nimport { WithSidebarWrapper } from \"./toc\"\n\nexport type WritingViewDataProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    description: string\n    body: string\n    excerpt: string\n    lastUpdated: string\n    seoDate: string\n    yearDate: string\n    seoLastUpdated: string\n    subtitle: string\n    timeToRead: string\n    tableOfContents?: {\n      items: unknown[]\n    }\n    image?: string\n    category: {\n      name: string\n      slug: string\n    }\n    parent: {\n      parent: {\n        relativePath: string\n      }\n    }\n  }\n  pathname: string\n  type: \"prose\" | \"tutorial\"\n}\n\nconst WritingView: React.FC<WritingViewDataProps> = ({ post, pathname, children, type }) => {\n  const [hasShareApi, setHasShareApi] = React.useState(false)\n\n  React.useEffect(() => {\n    setHasShareApi(!!window.navigator.share)\n  }, [])\n\n  return (\n    <Layout>\n      <SEO title={post.title} description={post.description ? post.description : post.excerpt} image={post.image}>\n        <meta name=\"twitter:label1\" value=\"Time To Read\" />\n        <meta name=\"twitter:data1\" value={`${post.timeToRead} Minutes`} />\n        <meta name=\"twitter:label2\" value=\"Category\" />\n        <meta name=\"twitter:data2\" value={post.category.name} />\n        <meta name=\"article:published_time\" content={post.seoDate} />\n        <meta name=\"article:modified_time\" content={post.seoLastUpdated} />\n        <script type=\"application/ld+json\">\n          {JSON.stringify(\n            article({\n              isGarden: false,\n              post: {\n                title: post.title,\n                description: post.description ? post.description : post.excerpt,\n                date: post.seoDate,\n                lastUpdated: post.seoLastUpdated,\n                year: post.yearDate,\n                image: post.image,\n                slug: post.slug,\n              },\n              category: {\n                name: post.category.name,\n                slug: post.category.slug,\n              },\n            })\n          )}\n        </script>\n      </SEO>\n      <Container variant=\"proseRoot\">\n        <SkipNavContent>\n          {children}\n          {type === `tutorial` ? (\n            <WithSidebarWrapper items={post.tableOfContents.items}>\n              <Prose as=\"article\" flex=\"1 1 100%\" minW=\"100%\">\n                <MDXProvider components={components}>\n                  <MDXRenderer>{post.body}</MDXRenderer>\n                </MDXProvider>\n              </Prose>\n            </WithSidebarWrapper>\n          ) : (\n            <Prose as=\"article\">\n              <MDXProvider components={components}>\n                <MDXRenderer>{post.body}</MDXRenderer>\n              </MDXProvider>\n            </Prose>\n          )}\n          <Spacer size={12} axis=\"vertical\" />\n          <Divider />\n          <Spacer size={6} axis=\"vertical\" />\n          <Stack\n            direction={[`column`, `row`]}\n            display=\"flex\"\n            spacing=\"5\"\n            justifyContent={[`flex-start`, `space-between`]}\n            alignItems={[`flex-start`, `center`]}\n          >\n            <Box>\n              {/* <ExternalLink\n                fontSize={[`md`, null, null, `1.125rem`]}\n                fontWeight=\"medium\"\n                href={`https://github.com/LekoArts/portfolio-v2/edit/main/www/content/writing/${post.parent.parent.relativePath}`}\n              >\n                Edit on GitHub\n              </ExternalLink> */}\n\n              <ExternalLink\n                fontSize={[`md`, null, null, `1.125rem`]}\n                fontWeight=\"medium\"\n                href={`https://www.twitter.com/search?q=${encodeURIComponent(`https://www.amankalra.com${pathname}`)}`}\n              >\n                Discuss on Twitter\n              </ExternalLink>\n            </Box>\n            {hasShareApi ? (\n              <Stack direction={[`column`, `row`]}>\n                <ShareAnywhereButton link={`${site.url}${post.slug}`} message={post.title} />\n                <TwitterButton link={`${site.url}${post.slug}`} message={post.title} variant=\"outline\" />\n              </Stack>\n            ) : (\n              <TwitterButton link={`${site.url}${post.slug}`} message={post.title} />\n            )}\n          </Stack>\n          {type === `prose` && (\n            <Text mt={6} fontSize={[`md`, null, null, `1.125rem`]}>\n              Last updated: {post.lastUpdated}\n            </Text>\n          )}\n        </SkipNavContent>\n      </Container>\n    </Layout>\n  )\n}\n\nexport default WritingView\n\nexport const query = graphql`\n  fragment WritingView on Post {\n    slug\n    title\n    description\n    excerpt\n    body\n    seoLastUpdated: lastUpdated\n    lastUpdated(formatString: \"MMM DD, YYYY\")\n    seoDate: date\n    yearDate: date(formatString: \"YYYY\")\n    date(formatString: \"MMM DD, YYYY\")\n    subtitle\n    timeToRead\n    image\n    category {\n      name\n      slug\n    }\n    ... on MdxPost {\n      parent {\n        ... on Mdx {\n          parent {\n            ... on File {\n              relativePath\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport { PageProps, graphql } from \"gatsby\"\nimport { Text, useColorModeValue } from \"@chakra-ui/react\"\nimport WritingView, { WritingViewDataProps } from \"../components/writing/writing-view\"\nimport { Heading } from \"../components/typography/heading\"\nimport { Spacer } from \"../components/blocks/spacer\"\n\nconst ProseTemplate: React.FC<PageProps<WritingViewDataProps>> = ({ data: { post }, location: { pathname } }) => {\n  const primary = useColorModeValue(`brand.textEmphasized`, `brand.dark.textEmphasized`)\n\n  return (\n    <WritingView post={post} pathname={pathname} type=\"prose\">\n      <Text color={primary} fontWeight={500} textAlign=\"center\" fontSize={[`md`, null, null, `1.125rem`, `1.3125rem`]}>\n        {post.category.name}\n      </Text>\n      <Spacer size={6} axis=\"vertical\" />\n      <Heading as=\"h1\" textAlign=\"center\">\n        {post.title}\n      </Heading>\n      <Spacer size={[16, null, null, 20]} axis=\"vertical\" />\n    </WritingView>\n  )\n}\n\nexport default ProseTemplate\n\nexport const query = graphql`\n  query ProseTemplate($slug: String!) {\n    post(slug: { eq: $slug }) {\n      ...WritingView\n    }\n  }\n`\n"],"names":["useActiveHash","itemIds","options","React","activeHash","setActiveHash","window","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","id","rootMargin","existingElements","map","document","getElementById","filter","Boolean","el","observe","unobserve","getIds","items","reduce","acc","item","url","push","slice","renderItems","activeId","nested","activeColor","itemId","isActive","color","key","mt","base","ml","href","title","Toc","tocHeadingColor","useColorModeValue","ids","activeItemHash","as","position","maxHeight","top","mb","fontSize","display","flexDir","minWidth","maxWidth","overflow","alignItems","textTransform","fontWeight","letterSpacing","WithSidebarWrapper","children","flexDirection","justifyContent","sx","gap","post","pathname","type","hasShareApi","setHasShareApi","navigator","share","description","excerpt","image","name","value","timeToRead","category","content","seoDate","seoLastUpdated","JSON","stringify","article","isGarden","date","lastUpdated","year","yearDate","slug","variant","tableOfContents","flex","minW","MDXProvider","components","MDXRenderer","body","size","axis","direction","spacing","encodeURIComponent","link","site","message","data","location","primary","textAlign"],"sourceRoot":""}