{"version":3,"file":"component---src-pages-garden-tsx-ba6c132497e174507fe0.js","mappings":"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","sources":["webpack://www/../node_modules/@chakra-ui/media-query/dist/chakra-ui-media-query.esm.js","webpack://www/../node_modules/@chakra-ui/tag/dist/chakra-ui-tag.esm.js","webpack://www/./src/components/typography/heading.tsx","webpack://www/./src/constants/space.ts","webpack://www/./src/pages/garden.tsx"],"sourcesContent":["import { useTheme } from '@chakra-ui/system';\nimport { isBrowser, __DEV__, memoizedGet, breakpoints, isArray, fromEntries, arrayToObjectNotation } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport React__default from 'react';\nimport { useEnvironment } from '@chakra-ui/react-env';\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nfunction useMediaQuery(query) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var isSupported = isBrowser && \"matchMedia\" in env.window;\n  var _React$useState = React.useState(queries.map(function (query) {\n      return isSupported ? !!env.window.matchMedia(query).matches : false;\n    })),\n    matches = _React$useState[0],\n    setMatches = _React$useState[1]; // Specifying matches in the dependency list will cause the event listeners\n  // to unload and then load each time the dependency changes. This causes\n  // Media Query Events to be missed. The event listeners should only be unloaded\n  // when the component unloads.\n\n  useSafeLayoutEffect(function () {\n    if (!isSupported) return undefined;\n    var mediaQueryList = queries.map(function (query) {\n      return env.window.matchMedia(query);\n    });\n    var listenerList = mediaQueryList.map(function (_, index) {\n      var listener = function listener(mqlEvent) {\n        var queryIndex = mediaQueryList.findIndex(function (mediaQuery) {\n          return mediaQuery.media === mqlEvent.media;\n        }); // As the event listener is on the media query list, any time the\n        // listener is called, we know there is a change. There's no need\n        // to compare the previous matches with current. Using\n        // setMatches(matches => {...}) provides access to the current matches\n        // state.  Trying to access matches outside the setMatches function\n        // would provide data from the the time of instantiation (stale).\n\n        setMatches(function (matches) {\n          var currentMatches = matches.map(function (x) {\n            return x;\n          });\n          currentMatches[queryIndex] = mqlEvent.matches;\n          return currentMatches;\n        });\n      }; // Listening to the 'change' event on the Media Query List Object\n      // is more performant as the callback is only invoked when a specified\n      // media query is matched. Using addEventListener on the window object\n      // to listen for the resize event will call the callback on every\n      // viewport resize.\n\n      if (typeof mediaQueryList[index].addEventListener === \"function\") {\n        mediaQueryList[index].addEventListener(\"change\", listener);\n      } else {\n        mediaQueryList[index].addListener(listener);\n      }\n      return listener;\n    });\n    return function () {\n      mediaQueryList.forEach(function (_, index) {\n        if (typeof mediaQueryList[index].removeEventListener === \"function\") {\n          mediaQueryList[index].removeEventListener(\"change\", listenerList[index]);\n        } else {\n          mediaQueryList[index].removeListener(listenerList[index]);\n        }\n      });\n    };\n  }, []);\n  return matches;\n}\n\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\nvar Visibility = function Visibility(props) {\n  var breakpoint = props.breakpoint,\n    hide = props.hide,\n    children = props.children;\n  var _useMediaQuery = useMediaQuery(breakpoint),\n    show = _useMediaQuery[0];\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\nvar Hide = function Hide(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\nvar Show = function Show(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\nvar getBreakpoint = function getBreakpoint(theme, value) {\n  return memoizedGet(theme, \"breakpoints.\" + value, value);\n};\nfunction useQuery(props) {\n  var _props$breakpoint = props.breakpoint,\n    breakpoint = _props$breakpoint === void 0 ? \"\" : _props$breakpoint,\n    below = props.below,\n    above = props.above;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n  return query;\n}\n\n/**\n * React hook used to get the user's animation preference.\n */\n\nfunction usePrefersReducedMotion() {\n  var _useMediaQuery = useMediaQuery(\"(prefers-reduced-motion: reduce)\"),\n    prefersReducedMotion = _useMediaQuery[0];\n  return prefersReducedMotion;\n}\n/**\n * React hook for getting the user's color mode preference.\n */\n\nfunction useColorModePreference() {\n  var _useMediaQuery2 = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"]),\n    isLight = _useMediaQuery2[0],\n    isDark = _useMediaQuery2[1];\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return undefined;\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param [defaultBreakpoint=\"base\"] default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\nfunction useBreakpoint(defaultBreakpoint // default value ensures SSR+CSR consistency\n) {\n  if (defaultBreakpoint === void 0) {\n    defaultBreakpoint = \"base\";\n  }\n  var _useTheme = useTheme(),\n    __breakpoints = _useTheme.__breakpoints;\n  var env = useEnvironment();\n  var queries = React__default.useMemo(function () {\n    var _breakpoints$details;\n    return (_breakpoints$details = __breakpoints == null ? void 0 : __breakpoints.details.map(function (_ref) {\n      var minMaxQuery = _ref.minMaxQuery,\n        breakpoint = _ref.breakpoint;\n      return {\n        breakpoint: breakpoint,\n        query: minMaxQuery.replace(\"@media screen and \", \"\")\n      };\n    })) != null ? _breakpoints$details : [];\n  }, [__breakpoints]);\n  var _React$useState = React__default.useState(function () {\n      if (defaultBreakpoint) {\n        // use default breakpoint to ensure render consistency in SSR + CSR environments\n        // => first render on the client has to match the render on the server\n        var fallbackBreakpointDetail = queries.find(function (_ref2) {\n          var breakpoint = _ref2.breakpoint;\n          return breakpoint === defaultBreakpoint;\n        });\n        if (fallbackBreakpointDetail) {\n          return fallbackBreakpointDetail.breakpoint;\n        }\n      }\n      if (env.window.matchMedia) {\n        // set correct breakpoint on first render if no default breakpoint was provided\n        var matchingBreakpointDetail = queries.find(function (_ref3) {\n          var query = _ref3.query;\n          return env.window.matchMedia(query).matches;\n        });\n        if (matchingBreakpointDetail) {\n          return matchingBreakpointDetail.breakpoint;\n        }\n      }\n      return undefined;\n    }),\n    currentBreakpoint = _React$useState[0],\n    setCurrentBreakpoint = _React$useState[1];\n  React__default.useEffect(function () {\n    var allUnregisterFns = queries.map(function (_ref4) {\n      var breakpoint = _ref4.breakpoint,\n        query = _ref4.query;\n      var mediaQueryList = env.window.matchMedia(query);\n      if (mediaQueryList.matches) {\n        setCurrentBreakpoint(breakpoint);\n      }\n      var handleChange = function handleChange(ev) {\n        if (ev.matches) {\n          setCurrentBreakpoint(breakpoint);\n        }\n      }; // add media query listener\n\n      if (typeof mediaQueryList.addEventListener === \"function\") {\n        mediaQueryList.addEventListener(\"change\", handleChange);\n      } else {\n        mediaQueryList.addListener(handleChange);\n      } // return unregister fn\n\n      return function () {\n        if (typeof mediaQueryList.removeEventListener === \"function\") {\n          mediaQueryList.removeEventListener(\"change\", handleChange);\n        } else {\n          mediaQueryList.removeListener(handleChange);\n        }\n      };\n    });\n    return function () {\n      allUnregisterFns.forEach(function (unregister) {\n        return unregister();\n      });\n    };\n  }, [queries, __breakpoints, env.window]);\n  return currentBreakpoint;\n}\nfunction getClosestValue(values, breakpoint, breakpoints$1) {\n  if (breakpoints$1 === void 0) {\n    breakpoints$1 = breakpoints;\n  }\n  var index = Object.keys(values).indexOf(breakpoint);\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n  var stopIndex = breakpoints$1.indexOf(breakpoint);\n  while (stopIndex >= 0) {\n    var key = breakpoints$1[stopIndex];\n    if (values[key] != null) {\n      index = stopIndex;\n      break;\n    }\n    stopIndex -= 1;\n  }\n  if (index !== -1) {\n    var _key = breakpoints$1[index];\n    return values[_key];\n  }\n  return undefined;\n}\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @param values\n * @param [defaultBreakpoint] default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\nfunction useBreakpointValue(values, defaultBreakpoint) {\n  var _theme$__breakpoints;\n  var breakpoint = useBreakpoint(defaultBreakpoint);\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the sorted breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Array.from(((_theme$__breakpoints = theme.__breakpoints) == null ? void 0 : _theme$__breakpoints.keys) || []);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(function (_ref) {\n    var key = _ref[0],\n      value = _ref[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\nexport { Hide, Show, useBreakpoint, useBreakpointValue, useColorModePreference, useMediaQuery, usePrefersReducedMotion, useQuery };","import { Icon } from '@chakra-ui/icon';\nimport { forwardRef, useMultiStyleConfig, omitThemingProps, StylesProvider, chakra, useStyles } from '@chakra-ui/system';\nimport { __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar _excluded = [\"isDisabled\", \"children\"];\n\n/**\n * The tag component is used to label or categorize UI elements.\n * To style the tag globally, change the styles in `theme.components.Tag`\n * @see Docs https://chakra-ui.com/tag\n */\nvar Tag = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Tag\", props);\n  var ownProps = omitThemingProps(props);\n  var containerStyles = _extends({\n    display: \"inline-flex\",\n    verticalAlign: \"top\",\n    alignItems: \"center\",\n    maxWidth: \"100%\"\n  }, styles.container);\n  return /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.span, _extends({\n    ref: ref\n  }, ownProps, {\n    __css: containerStyles\n  })));\n});\nif (__DEV__) {\n  Tag.displayName = \"Tag\";\n}\nvar TagLabel = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    ref: ref,\n    isTruncated: true\n  }, props, {\n    __css: styles.label\n  }));\n});\nif (__DEV__) {\n  TagLabel.displayName = \"TagLabel\";\n}\nvar TagLeftIcon = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(Icon, _extends({\n    ref: ref,\n    verticalAlign: \"top\",\n    marginEnd: \"0.5rem\"\n  }, props));\n});\nif (__DEV__) {\n  TagLeftIcon.displayName = \"TagLeftIcon\";\n}\nvar TagRightIcon = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(Icon, _extends({\n    ref: ref,\n    verticalAlign: \"top\",\n    marginStart: \"0.5rem\"\n  }, props));\n});\nif (__DEV__) {\n  TagRightIcon.displayName = \"TagRightIcon\";\n}\nvar TagCloseIcon = function TagCloseIcon(props) {\n  return /*#__PURE__*/React.createElement(Icon, _extends({\n    verticalAlign: \"inherit\",\n    viewBox: \"0 0 512 512\"\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"\n  }));\n};\nif (__DEV__) {\n  TagCloseIcon.displayName = \"TagCloseIcon\";\n}\n\n/**\n * TagCloseButton is used to close \"remove\" the tag\n * @see Docs https://chakra-ui.com/tag\n */\nvar TagCloseButton = function TagCloseButton(props) {\n  var isDisabled = props.isDisabled,\n    children = props.children,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  var styles = useStyles();\n  var btnStyles = _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    outline: \"0\"\n  }, styles.closeButton);\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({\n    \"aria-label\": \"close\"\n  }, rest, {\n    type: \"button\",\n    disabled: isDisabled,\n    __css: btnStyles\n  }), children || /*#__PURE__*/React.createElement(TagCloseIcon, null));\n};\nif (__DEV__) {\n  TagCloseButton.displayName = \"TagCloseButton\";\n}\nexport { Tag, TagCloseButton, TagLabel, TagLeftIcon, TagRightIcon };","import * as React from \"react\"\nimport { Heading as ChakraHeading, HeadingProps as ChakraHeadingProps } from \"@chakra-ui/react\"\n\ninterface HeadingProps extends ChakraHeadingProps {\n  as: \"h1\" | \"h2\" | \"h3\" | \"h4\"\n}\n\n/**\n * Heading component accepting heading levels\n * Wraps the Heading component from Chakra\n */\nexport const Heading: React.FC<HeadingProps> = ({ as, children, ...rest }) => (\n  <ChakraHeading as={as} variant={as} {...rest}>\n    {children}\n  </ChakraHeading>\n)\n","export const space = {\n  paddingLarge: [20, 24, null, 40, 48],\n  paddingMedium: [16, 24, null, 36, 40],\n  paddingSmall: [12, 16, null, 24, 28],\n}\n","import * as React from \"react\"\nimport { graphql, PageProps } from \"gatsby\"\nimport { BsArrowRight } from \"react-icons/bs\"\nimport {\n  Container,\n  Tag,\n  TagLabel,\n  TagCloseButton,\n  Wrap,\n  WrapItem,\n  Heading as ChakraHeading,\n  Stack,\n  Text,\n  Box,\n  useColorModeValue,\n  usePrefersReducedMotion,\n} from \"@chakra-ui/react\"\nimport { Layout } from \"../components/blocks/layout\"\nimport { Link } from \"../components/link\"\nimport { SkipNavContent } from \"../components/a11y/skip-nav\"\nimport { space } from \"../constants/space\"\nimport { Heading } from \"../components/typography/heading\"\nimport { Spacer } from \"../components/blocks/spacer\"\nimport { SEO } from \"../components/seo\"\n\ntype DataProps = {\n  garden: {\n    group: {\n      title: string\n    }[]\n    nodes: {\n      title: string\n      slug: string\n      icon: string\n      lastUpdated: string\n      tags: string[]\n    }[]\n  }\n}\n\ninterface State {\n  tags: string[]\n}\n\ntype Action = { type: `ADD_TAG`; payload: string } | { type: `REMOVE_TAG`; payload: string }\n\nconst initialState: State = {\n  tags: [],\n}\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case `ADD_TAG`:\n      return { ...state, tags: state.tags.concat(action.payload) }\n    case `REMOVE_TAG`:\n      return { ...state, tags: state.tags.filter((tag) => tag !== action.payload) }\n    default:\n      throw new Error(`Unknown action passed to filter reducer`)\n  }\n}\n\nconst Garden: React.FC<PageProps<DataProps>> = ({ data: { garden } }) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n  const prefersReducedMotion = usePrefersReducedMotion()\n  const dividerColor = useColorModeValue(`blueGray.100`, `blueGray.800`)\n  const bgHoverColor = useColorModeValue(`blueGray.100`, `blueGray.800`)\n  const prominentLink = useColorModeValue(`brand.heading`, `brand.dark.heading`)\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Digital Garden\"\n        description=\"I understand my Digital Garden as a collection of free form, interconnected & evolving ideas that grow over time. Like plants grow in a real-world garden.\"\n        image=\"/social/digital-garden.png\"\n        breadcrumbListItems={[{ name: `Digital Garden`, url: `/garden` }]}\n      />\n      <SkipNavContent>\n        <Container py={space.paddingSmall}>\n          <Heading as=\"h1\">Digital Garden</Heading>\n          <Text textStyle=\"prominent\">\n            <Link to=\"/garden/what-is-a-digital-garden\" color={prominentLink}>\n              What is a Digital Garden?\n            </Link>\n            {` `}\n            Select tags to filter posts:\n          </Text>\n          <Spacer size={6} axis=\"vertical\" />\n          <Wrap>\n            {garden.group.map((tag) => {\n              const isActive = state.tags.includes(tag.title)\n\n              return (\n                <WrapItem\n                  as=\"button\"\n                  onClick={() => {\n                    if (state.tags.includes(tag.title)) {\n                      dispatch({ type: `REMOVE_TAG`, payload: tag.title })\n                    } else {\n                      dispatch({ type: `ADD_TAG`, payload: tag.title })\n                    }\n                  }}\n                  borderRadius=\"md\"\n                  _hover={{\n                    cursor: `pointer`,\n                  }}\n                  _focus={{\n                    boxShadow: `outline`,\n                    outline: `none`,\n                  }}\n                  key={tag.title}\n                >\n                  <Tag colorScheme={isActive ? `blue` : `gray`} size=\"lg\">\n                    <TagLabel>{tag.title}</TagLabel>\n                    {isActive && <TagCloseButton as=\"span\" aria-hidden aria-label=\"\" />}\n                  </Tag>\n                </WrapItem>\n              )\n            })}\n          </Wrap>\n          <Spacer size={20} axis=\"vertical\" />\n          <Stack\n            spacing={0}\n            divider={<Spacer axis=\"horizontal\" size=\"100%\" bg={dividerColor} border=\"none\" />}\n            mx={[`-2`, null, null, `-6`]}\n          >\n            {garden.nodes\n              .filter(({ tags = [] }) => {\n                if (state.tags.length === 0) {\n                  return true\n                }\n                return state.tags.some((tag) => tags.includes(tag))\n              })\n              .sort((aPost, bPost) => {\n                const a = new Date(aPost.lastUpdated)\n                const b = new Date(bPost.lastUpdated)\n\n                // eslint-disable-next-line no-nested-ternary\n                return a > b ? -1 : a < b ? 1 : 0\n              })\n              .map((post) => (\n                <Link\n                  to={post.slug}\n                  key={post.slug}\n                  display=\"grid\"\n                  gridTemplateColumns={[`25px 1fr 20px`, `35px 1fr 20px`, null, `50px 1fr 24px`]}\n                  alignItems=\"center\"\n                  gridGap={6}\n                  px={[2, null, null, 6]}\n                  py={[2, null, null, 6]}\n                  borderRadius=\"lg\"\n                  _hover={{\n                    textDecoration: `none`,\n                    backgroundColor: bgHoverColor,\n                  }}\n                  sx={{\n                    span: {\n                      transform: `translate3d(0px, 0px, 0px)`,\n                      transition: `transform .3s cubic-bezier(.73,.26,.42,1.24)`,\n                    },\n                    \"&:hover\": {\n                      span: {\n                        transform: prefersReducedMotion ? undefined : `translate3d(6px, 0px, 0px)`,\n                      },\n                    },\n                    svg: {\n                      height: [`1.25em`, null, null, `1.5em`],\n                      width: [`1.25em`, null, null, `1.5em`],\n                    },\n                  }}\n                >\n                  <Box width={[25, 35, null, 50]} height={[25, 35, null, 50]}>\n                    <img alt=\"\" src={`/icons/${post.icon}.svg`} width=\"100%\" height=\"100%\" />\n                  </Box>\n                  <Box>\n                    <ChakraHeading as=\"h2\" variant=\"gardenItem\">\n                      {post.title}\n                    </ChakraHeading>\n                    <Text fontSize={[`14px`, null, null, `1rem`]}>{post.lastUpdated}</Text>\n                  </Box>\n                  <span>\n                    <BsArrowRight />\n                  </span>\n                </Link>\n              ))}\n          </Stack>\n        </Container>\n      </SkipNavContent>\n    </Layout>\n  )\n}\n\nexport default Garden\n\nexport const query = graphql`\n  {\n    garden: allGarden(sort: { fields: lastUpdated, order: DESC }) {\n      group(field: tags) {\n        title: fieldValue\n      }\n      nodes {\n        title\n        slug\n        icon\n        lastUpdated(formatString: \"MMM DD, YYYY\")\n        tags\n      }\n    }\n  }\n`\n"],"names":["useSafeLayoutEffect","useMediaQuery","query","env","queries","Array","isArray","isSupported","window","_React$useState","map","matchMedia","matches","setMatches","mediaQueryList","listenerList","_","index","listener","mqlEvent","queryIndex","findIndex","mediaQuery","media","currentMatches","x","addEventListener","addListener","forEach","removeEventListener","removeListener","usePrefersReducedMotion","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_excluded","Tag","props","ref","styles","ownProps","containerStyles","display","verticalAlign","alignItems","maxWidth","container","value","__css","displayName","TagLabel","isTruncated","label","TagLeftIcon","marginEnd","TagRightIcon","marginStart","TagCloseIcon","viewBox","fill","d","TagCloseButton","isDisabled","children","rest","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","btnStyles","justifyContent","outline","closeButton","type","disabled","Heading","as","variant","space","paddingLarge","paddingMedium","paddingSmall","initialState","tags","reducer","state","action","concat","payload","filter","tag","Error","garden","data","React","dispatch","prefersReducedMotion","dividerColor","useColorModeValue","bgHoverColor","prominentLink","title","description","image","breadcrumbListItems","name","url","py","textStyle","to","color","size","axis","group","isActive","includes","onClick","borderRadius","_hover","cursor","_focus","boxShadow","colorScheme","spacing","divider","bg","border","mx","nodes","some","sort","aPost","bPost","a","Date","lastUpdated","b","post","slug","gridTemplateColumns","gridGap","px","textDecoration","backgroundColor","sx","span","transform","transition","undefined","svg","height","width","alt","src","icon","fontSize"],"sourceRoot":""}