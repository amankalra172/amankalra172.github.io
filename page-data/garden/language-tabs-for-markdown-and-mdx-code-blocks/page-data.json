{
    "componentChunkName": "component---src-templates-garden-tsx",
    "path": "/garden/language-tabs-for-markdown-and-mdx-code-blocks",
    "result": {"data":{"garden":{"title":"Language Tabs for Markdown & MDX Code Blocks","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Language Tabs for Markdown & MDX Code Blocks\",\n  \"date\": \"2019-09-07T00:00:00.000Z\",\n  \"lastUpdated\": \"2021-04-23T00:00:00.000Z\",\n  \"icon\": \"mdx\",\n  \"tags\": [\"Gatsby\", \"MDX\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Integrating syntax highlighting in Gatsby is solvable with solutions like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/plugins/gatsby-remark-prismjs/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"gatsby-remark-prismjs\")), \" or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/FormidableLabs/prism-react-renderer\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"prism-react-renderer\")), \". When creating the code block in Markdown you specify the desired language (e.g. js or css) after the opening three backticks. It\\u2019s a nice touch to display the specified language also in the code block itself, like I do it on my blog here:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const harry = spell(\\\"lumos\\\")\\n\")), mdx(\"p\", null, \"The following two quick tips explain how to integrate this feature with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-remark-prismjs\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prism-react-renderer\"), \" (Markdown or MDX respectively).\"), mdx(\"h2\", {\n    \"id\": \"markdown--gatsby-remark-prismjs\"\n  }, \"Markdown & gatsby-remark-prismjs\"), mdx(\"p\", null, \"I created the codesandbox \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/language-tabs-for-gatsby-remark-prismjs-lvcny\"\n  }, \"language-tabs-for-gatsby-remark-prismjs\"), \" which you can have a look at the final and working code if you prefer to jump straight to the solution.\"), mdx(\"p\", null, \"Set up a Gatsby project which allows you to source data from Markdown. You can e.g. run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm init gatsby\"), \" and select the Markdown option. Now install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-remark-prismjs\"), \" and configure your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \" & \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-browser.js\"), \" accordingly. Add some dummy content to one of your markdown files to see something happen, e.g.:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-md\"\n  }, \"```js\\nconst harry = spell(\\\"lumos\\\")\\n```\\n\")), mdx(\"p\", null, \"After starting your Gatsby dev server you should have a syntax highlighted code block. Now do a right-click on the code block, followed up by a click on \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Inspect element\"), \" to view the block in the developer tools. You see something like:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n  <pre\\n    class=\\\"language-js\\\"\\n  ><code class=\\\"language-js\\\">YOUR_CONTENT_HERE</code></pre>\\n</div>\\n\")), mdx(\"p\", null, \"You need to target the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gatsby-highlight\"), \" class and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pre\"), \" tag to add the label via the pseudo-selector \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"::before\"), \".\"), mdx(\"p\", null, \"Create a CSS file and include it in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-browser.js\"), \" file. The CSS itself is:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\",\n    \"metastring\": \"title=custom-prism-styles.css withLineNumbers\",\n    \"title\": \"custom-prism-styles.css\",\n    \"withLineNumbers\": true\n  }, \".gatsby-highlight {\\n  position: relative;\\n  -webkit-overflow-scrolling: touch;\\n}\\n.gatsby-highlight pre[class*=\\\"language-\\\"] {\\n  -webkit-overflow-scrolling: touch;\\n}\\n.gatsby-highlight pre[class*=\\\"language-\\\"]::before {\\n  background: black;\\n  border-radius: 0 0 0.25rem 0.25rem;\\n  color: white;\\n  font-size: 12px;\\n  letter-spacing: 0.025rem;\\n  padding: 0.1rem 0.5rem;\\n  position: absolute;\\n  right: 1rem;\\n  text-align: right;\\n  text-transform: uppercase;\\n  top: 0;\\n}\\n.gatsby-highlight pre[class=\\\"language-js\\\"]::before {\\n  content: \\\"js\\\";\\n  background: #f7df1e;\\n  color: black;\\n}\\n\")), mdx(\"p\", null, \"The wrapping \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" has a relative position so that the tab itself can be positioned absolutely. The CSS also makes use of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\"\n  }, \"attribute selectors\"), \" to target every \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pre\"), \" tag with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"language-*\"), \" classes. Every language will be targeted by this (your default styling), hence for specific languages you overwrite some of the styling.\"), mdx(\"p\", null, \"If you want to add tabs for other languages, copy the existing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"language-js\"), \" version (you can again inspect the DOM before to know what to target).\"), mdx(\"h2\", {\n    \"id\": \"mdx--prism-react-renderer\"\n  }, \"MDX & prism-react-renderer\"), mdx(\"p\", null, \"When using MDX and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-plugin-mdx\"), \" you could also use the aforementioned \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-remark-prismjs\"), \", however MDX offers you more possibilities, so why not use them, e.g. for a live editor?\\nSet up a new project with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm init gatsby\"), \" and choose MDX this time. Also install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prism-react-renderer\"), \". You can copy \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"custom-prism-styles.css\"), \" from the first quick tip to this project and also import it inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-browser.js\"), \".\"), mdx(\"p\", null, \"To get the CSS from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"custom-prism-styles.css\"), \" to work, you\\u2019ll need to think of adding a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gatsby-highlight\"), \" when using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prism-react-renderer\"), \".\"), mdx(\"p\", null, \"The main part is to create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Code />\"), \" component and mapping it to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pre\"), \" tag in MDX. The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/language-tabs-mdx-g03g6\"\n  }, \"language-tabs-mdx\"), \" codesandbox shows the complete setup, here\\u2019s the code component as a snippet:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=src/components/code.js\",\n    \"title\": \"src/components/code.js\"\n  }, \"import React from \\\"react\\\"\\nimport Highlight, { defaultProps } from \\\"prism-react-renderer\\\"\\n\\nconst Code = () => (\\n  <Highlight {...defaultProps} code={codeString} language={language}>\\n    {({ className, style, tokens, getLineProps, getTokenProps }) => (\\n      <div className=\\\"gatsby-highlight\\\" data-language={language}>\\n        <pre className={className} style={style}>\\n          {tokens.map((line, i) => (\\n            <div {...getLineProps({ line, key: i })}>\\n              {line.map((token, key) => (\\n                <span {...getTokenProps({ token, key })} />\\n              ))}\\n            </div>\\n          ))}\\n        </pre>\\n      </div>\\n    )}\\n  </Highlight>\\n)\\n\\nexport default Code\\n\")), mdx(\"p\", null, \"If you now start the development server and inspect the HTML the extra container will be in the DOM. Should work with the above CSS now, right? Not quite yet, one small adjustment needs to be made. As you can see in the DOM, the pre element now has two classes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<pre class=\\\"prism-code language-js\\\">YOUR_CONTENT</pre>\\n\")), mdx(\"p\", null, \"Therefore the previous \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pre[class=\\\"language-js\\\"]\"), \" selector won\\u2019t work anymore as it expects only this one class. By changing this to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pre[class~=\\\"language-js\\\"]\"), \" you say: When one of the class names is language-js, please do the following.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/garden/language-tabs-for-markdown-and-mdx-code-blocks","icon":"mdx","seoLastUpdated":"2021-04-23T00:00:00.000Z","lastUpdated":"Apr 23, 2021","seoDate":"2019-09-07T00:00:00.000Z","date":"Sep 07, 2019","yearDate":"2019","tags":["Gatsby","MDX"],"timeToRead":2,"excerpt":"Integrating syntax highlighting in Gatsby is solvable with solutions like  gatsby-remark-prismjs  or  prism-react-renderer . When creating…","parent":{"parent":{"relativePath":"2019-09-07--language-tabs-for-markdown-and-mdx-code-blocks/index.mdx"}}}},"pageContext":{"slug":"/garden/language-tabs-for-markdown-and-mdx-code-blocks"}},
    "staticQueryHashes": ["2299006781","3050858678","4184542181","712324210"]}