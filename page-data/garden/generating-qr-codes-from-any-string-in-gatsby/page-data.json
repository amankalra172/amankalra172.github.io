{
    "componentChunkName": "component---src-templates-garden-tsx",
    "path": "/garden/generating-qr-codes-from-any-string-in-gatsby",
    "result": {"data":{"garden":{"title":"Generating QR Codes from any String in Gatsby","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Generating QR Codes from any String in Gatsby\",\n  \"date\": \"2021-07-25T00:00:00.000Z\",\n  \"lastUpdated\": \"2021-07-25T00:00:00.000Z\",\n  \"icon\": \"gatsby\",\n  \"tags\": [\"Gatsby\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"One of the many side-effects of the coronavirus pandemic is that the QR code got some attenion (again). When it first came out you saw it everywhere but the last couple of years it slowly vanished again \\u2014 until now where your vaccination certificate or check-in apps all use QR codes again.\"), mdx(\"p\", null, \"Generating QR codes from any string you wish in Gatsby could be done in multiple ways. Normally for such operations you\\u2019d set up a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"transformer\"), \" plugin but realistically you wouldn\\u2019t want \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"every\"), \" string to be converted to a QR code. Thus you can use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/docs/reference/graphql-data-layer/schema-customization/\"\n  }, \"createSchemaCustomization API\"), \" to individually add a new field to your desired node and transform a specific sibling field. This saves work & build time! You can take this YAML schema as an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\",\n    \"metastring\": \"title=src/data/information.yml\",\n    \"title\": \"src/data/information.yml\"\n  }, \"- name: Author's Homepage\\n  description: Visit the author's homepage for more information and other cool stuff\\n  link: https://www.lekoarts.de\\n\")), mdx(\"p\", null, \"Gatsby will generate a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InformationYaml\"), \" type out of it and you want to have an additional field called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"qrCodeDataURL\"), \" that contains the data URI of a QR code generated from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"link\"), \" field. Then you can query it like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"query {\\n  informationYaml {\\n    name\\n    link\\n    description\\n    qrCodeDataURL\\n  }\\n}\\n\")), mdx(\"p\", null, \"Continue reading to learn how to do this! You can find the finished code on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/gatsby-qr-code-with-schema-customization-ldsc5\"\n  }, \"Codesandbox\"), \" and you can also check out \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/garden/filter-future-posts-on-a-gatsby-blog\"\n  }, \"Filter Future Posts on a Gatsby Blog\"), \" to see the API in a similar example.\"), mdx(\"h2\", {\n    \"id\": \"setup\"\n  }, \"Setup\"), mdx(\"p\", null, \"I\\u2019m assuming that you already have a Gatsby project set up with some specific fields you want to convert. If not, you can run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm init gatsby\"), \" and choose the markdown option. Then you can use the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"frontmatter\"), \" to add an additional field. Stop your development server if it\\u2019s still running.\"), mdx(\"p\", null, \"My example is using a YAML file that is represented as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InformationYaml\"), \" in the GraphQL schema of Gatsby. You\\u2019ve seen the shape of it in the intro of this post.\"), mdx(\"p\", null, \"Install two dependencies you\\u2019ll need:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"npm install lodash.get qrcode\\n\")), mdx(\"h2\", {\n    \"id\": \"generating-qr-codes\"\n  }, \"Generating QR codes\"), mdx(\"p\", null, \"Open your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \" file and add the installed package, and the boilerplate to use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/docs/reference/graphql-data-layer/schema-customization/\"\n  }, \"Gatsby\\u2019s schema customization API\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gatsby-node.js\",\n    \"title\": \"gatsby-node.js\"\n  }, \"const get = require(\\\"lodash.get\\\")\\nconst QRCode = require(\\\"qrcode\\\")\\n\\nexports.createSchemaCustomization = ({ actions }) => {\\n  const { createTypes, createFieldExtension } = actions\\n}\\n\")), mdx(\"p\", null, \"With the function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createTypes\"), \" you\\u2019ll explicitly define the GraphQL types (in this case in GraphQL \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.prisma.io/blog/graphql-sdl-schema-definition-language-6755bcb9ce51\"\n  }, \"SDL\"), \" syntax), with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createFieldExtension\"), \" you\\u2019ll create a so called directive/extension that you then can reuse throughout your types.\"), mdx(\"h3\", {\n    \"id\": \"adding-the-new-field-to-the-type\"\n  }, \"Adding the new field to the type\"), mdx(\"p\", null, \"Since the QR code should be available at the field \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"qrCodeDataURL\"), \" it needs to be added to the desired GraphQL type.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gatsby-node.js {7-11}\",\n    \"title\": \"gatsby-node.js\",\n    \"{7-11}\": true\n  }, \"const get = require(\\\"lodash.get\\\")\\nconst QRCode = require(\\\"qrcode\\\")\\n\\nexports.createSchemaCustomization = ({ actions }) => {\\n  const { createTypes, createFieldExtension } = actions\\n\\n  createTypes(`\\n    type InformationYaml implements Node {\\n      qrCodeDataURL: String\\n    }\\n  `)\\n}\\n\")), mdx(\"p\", null, \"But if you\\u2019d query this field now you\\u2019d only get \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" as a result. The data needs to be generated first before querying it.\"), mdx(\"h3\", {\n    \"id\": \"creating-the-field-extension\"\n  }, \"Creating the field extension\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createFieldExtension\"), \" action to create a custom directive that you can use on the newly created \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"qrCodeDataURL\"), \" field:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gatsby-node.js {7-17,21}\",\n    \"title\": \"gatsby-node.js\",\n    \"{7-17,21}\": true\n  }, \"const get = require(\\\"lodash.get\\\")\\nconst QRCode = require(\\\"qrcode\\\")\\n\\nexports.createSchemaCustomization = ({ actions }) => {\\n  const { createTypes, createFieldExtension } = actions\\n\\n  createFieldExtension({\\n    name: \\\"createQRCode\\\",\\n    args: {\\n      fieldName: \\\"String!\\\",\\n    },\\n    extend({ fieldName }) {\\n      return {\\n        resolve: createQRCode(fieldName),\\n      }\\n    },\\n  })\\n\\n  createTypes(`\\n    type InformationYaml implements Node {\\n      qrCodeDataURL: String @createQRCode(fieldName: \\\"link\\\")\\n    }\\n  `)\\n}\\n\")), mdx(\"p\", null, \"But the last piece to this puzzle is missing: The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createQRCode\"), \" function. The field extension will use result of it as the value of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"qrCodeDataURL\"), \" field. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createQRCode\"), \" gets passed all the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fieldName\"), \" you use (in this example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"link\\\"\"), \").\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gatsby-node.js {7-18}\",\n    \"title\": \"gatsby-node.js\",\n    \"{7-18}\": true\n  }, \"const get = require(\\\"lodash.get\\\")\\nconst QRCode = require(\\\"qrcode\\\")\\n\\nexports.createSchemaCustomization = ({ actions }) => {\\n  const { createTypes, createFieldExtension } = actions\\n\\n  const createQRCode = (fieldName) => async (source) => {\\n    const string = get(source, fieldName)\\n    let qrCode = ``\\n\\n    try {\\n      qrCode = await QRCode.toDataURL(string, { scale: 6 })\\n    } catch (err) {\\n      console.error(err)\\n    }\\n\\n    return qrCode\\n  }\\n\\n  createFieldExtension({\\n    name: \\\"createQRCode\\\",\\n    args: {\\n      fieldName: \\\"String!\\\",\\n    },\\n    extend({ fieldName }) {\\n      return {\\n        resolve: createQRCode(fieldName),\\n      }\\n    },\\n  })\\n\\n  createTypes(`\\n    type InformationYaml implements Node {\\n      qrCodeDataURL: String @createQRCode(fieldName: \\\"link\\\")\\n    }\\n  `)\\n}\\n\")), mdx(\"p\", null, \"You can find more information about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"qrcode\"), \"\\u2019s options on its \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/soldair/node-qrcode\"\n  }, \"GitHub page\"), \".\"), mdx(\"h2\", {\n    \"id\": \"using-the-result\"\n  }, \"Using the result\"), mdx(\"p\", null, \"Now you\\u2019re able to query the new data! Start the development server and visit GraphiQL at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:8000/___graphql\"), \". If you explore the schema you should see \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"qrCodeDataURL\"), \" now. You can use this data URI as an image now, for example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=src/pages/index.js\",\n    \"title\": \"src/pages/index.js\"\n  }, \"import * as React from \\\"react\\\"\\nimport { graphql } from \\\"gatsby\\\"\\n\\nexport default function Home({ data }) {\\n  return (\\n    <main>\\n      <h1>{data.info.name}</h1>\\n      <p>\\n        {data.info.description}: <br />{\\\" \\\"}\\n        <a href={data.info.link}>Visit the website</a> or scan this QR code:\\n      </p>\\n      <img\\n        alt=\\\"QR Code to the authors homepage\\\"\\n        src={data.info.qrCodeDataURL}\\n      />\\n    </main>\\n  )\\n}\\n\\nexport const query = graphql`\\n  {\\n    info: informationYaml {\\n      name\\n      link\\n      description\\n      qrCodeDataURL\\n    }\\n  }\\n`\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/garden/generating-qr-codes-from-any-string-in-gatsby","icon":"gatsby","seoLastUpdated":"2021-07-25T00:00:00.000Z","lastUpdated":"Jul 25, 2021","seoDate":"2021-07-25T00:00:00.000Z","date":"Jul 25, 2021","yearDate":"2021","tags":["Gatsby"],"timeToRead":2,"excerpt":"One of the many side-effects of the coronavirus pandemic is that the QR code got some attenion (again). When it first came out you saw it…","parent":{"parent":{"relativePath":"2021-07-25--generating-qr-codes-from-any-string-in-gatsby/index.mdx"}}}},"pageContext":{"slug":"/garden/generating-qr-codes-from-any-string-in-gatsby"}},
    "staticQueryHashes": ["2299006781","3050858678","4184542181","712324210"]}