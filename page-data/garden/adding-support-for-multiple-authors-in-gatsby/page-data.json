{
    "componentChunkName": "component---src-templates-garden-tsx",
    "path": "/garden/adding-support-for-multiple-authors-in-gatsby",
    "result": {"data":{"garden":{"title":"Adding Support for Multiple Authors in Gatsby","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Adding Support for Multiple Authors in Gatsby\",\n  \"date\": \"2020-01-16T00:00:00.000Z\",\n  \"lastUpdated\": \"2021-04-26T00:00:00.000Z\",\n  \"icon\": \"gatsby\",\n  \"tags\": [\"Gatsby\", \"MDX\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This quick tip will explain how you can have multiple authors for your blog posts. It\\u2019s not limited to Markdown but the example Gatsby site will use that. You can apply the general technique also to your site that is powered by a CMS or other data source. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/markdown-multiple-authors-b3s64\"\n  }, \"See the example project on Codesandbox\"), \".\"), mdx(\"p\", null, \"Please note that this article won\\u2019t walk you through an example from start to finish but rather explain the concepts behind it. Feel free to clone \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/gatsbyjs/gatsby-starter-blog\"\n  }, \"gatsby-starter-blog\"), \" and try it yourself after reading this blog post.\"), mdx(\"h2\", {\n    \"id\": \"setup\"\n  }, \"Setup\"), mdx(\"p\", null, \"So, what\\u2019s the starting point? For this example you\\u2019ll start of with a markdown powered Gatsby site and each blog post has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frontmatter\"), \" with things like title, slug, and author. Now you want to add the ability to add multiple authors to one blog post and also provide some additional information about the authors.\"), mdx(\"p\", null, \"So the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frontmatter\"), \" of each blog post could look like:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-md\"\n  }, \"---\\ntitle: \\\"Second blog post\\\"\\ndate: 2020-01-02\\nslug: \\\"/second-blog-post\\\"\\nauthors:\\n  - \\\"Hermione\\\"\\n  - \\\"Ron\\\"\\n---\\n\")), mdx(\"p\", null, \"For the detailed information (description, image) of each author you can use something like an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"authors.yml\"), \" file. YAML files are a great fit for that usecase (e.g. allow comments, easy to parse and lint). Put the file together with some images into the same folder, set up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-source-filesystem\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-transformer-yaml\"), \" and paste something in like:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"- name: \\\"Harry\\\"\\n  description: \\\"The chosen one\\\"\\n  image: \\\"./harry.jpg\\\"\\n- name: \\\"Ron\\\"\\n  description: \\\"Harry's best friend\\\"\\n  image: \\\"./ron.jpg\\\"\\n- name: \\\"Hermione\\\"\\n  description: \\\"Smartest girl\\\"\\n  image: \\\"./hermione.jpg\\\"\\n\")), mdx(\"p\", null, \"The important bit here is that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" is unique and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"frontmatter\"), \" only references available names.\"), mdx(\"h2\", {\n    \"id\": \"creating-the-link\"\n  }, \"Creating the link\"), mdx(\"p\", null, \"Now it\\u2019s time for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/docs/reference/graphql-data-layer/schema-customization/\"\n  }, \"Gatsby\\u2019s schema customization API\"), \" to shine. The end goal is that you can query something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"{\\n  query {\\n    markdownRemark {\\n      frontmatter {\\n        title\\n        authors {\\n          description\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"For this to work you\\u2019ll need to create a foreign-key relationship between the blog posts and the authors. Or in other words: Between \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MarkdownRemark\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AuthorsYaml\"), \". Because those are the respective types - you can see them by going to your GraphiQL instance at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:8000/___graphql\"), \".\"), mdx(\"p\", null, \"Add to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gatsby-node.js {9}\",\n    \"title\": \"gatsby-node.js\",\n    \"{9}\": true\n  }, \"exports.createSchemaCustomization = ({ actions }) => {\\n  const { createTypes } = actions\\n  const typeDefs = `\\n    type MarkdownRemark implements Node {\\n      frontmatter: Frontmatter\\n    }\\n\\n    type Frontmatter {\\n      authors: [AuthorsYaml] @link(by: \\\"name\\\")\\n    }\\n  `\\n  createTypes(typeDefs)\\n}\\n\")), mdx(\"p\", null, \"In order to explicitly define the nested frontmatter you first need define root type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MarkdownRemark\"), \" that then has the custom type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Frontmatter\"), \". The part \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"implements Node\"), \" means that the type will use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Node\"), \" interface that defines set of fields common to node objects created by source plugins/transformers.\"), mdx(\"p\", null, \"The important bit here is:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"authors: [AuthorsYaml] @link(by: \\\"name\\\")\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AuthorsYaml\"), \" is the type for your yaml file, the bracket notation means that authors is having an array of items with the type of AuthorsYaml. Now you\\u2019re saying that both should be linked by name. Remember: The name is common in both files and unique.\"), mdx(\"p\", null, \"Learn more about it in-depth here: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/docs/reference/graphql-data-layer/schema-customization/\"\n  }, \"Gatsby\\u2019s docs about schema customization\"), \".\"), mdx(\"h2\", {\n    \"id\": \"other-data-sources\"\n  }, \"Other data sources\"), mdx(\"p\", null, \"This quick tip explained the concept with markdown files and a yaml file. But what about CMSs or other local files? You\\u2019ll want to get the type names (e.g. from GraphiQL) and also type until you reached the nested type. Use a unique property for linking.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/garden/adding-support-for-multiple-authors-in-gatsby","icon":"gatsby","seoLastUpdated":"2021-04-26T00:00:00.000Z","lastUpdated":"Apr 26, 2021","seoDate":"2020-01-16T00:00:00.000Z","date":"Jan 16, 2020","yearDate":"2020","tags":["Gatsby","MDX"],"timeToRead":2,"excerpt":"This quick tip will explain how you can have multiple authors for your blog posts. It's not limited to Markdown but the example Gatsby siteâ€¦","parent":{"parent":{"relativePath":"2020-01-16--adding-support-for-multiple-authors-in-gatsby/index.mdx"}}}},"pageContext":{"slug":"/garden/adding-support-for-multiple-authors-in-gatsby"}},
    "staticQueryHashes": ["2299006781","3050858678","4184542181","712324210"]}