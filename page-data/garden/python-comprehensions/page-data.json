{
    "componentChunkName": "component---src-templates-garden-tsx",
    "path": "/garden/python-comprehensions",
    "result": {"data":{"garden":{"title":"Python: Comprehensions","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Python: Comprehensions\",\n  \"date\": \"2021-07-17T00:00:00.000Z\",\n  \"lastUpdated\": \"2021-07-17T00:00:00.000Z\",\n  \"icon\": \"python\",\n  \"tags\": [\"Python\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Alert = makeShortcode(\"Alert\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Comprehensions (and list comprehensions in particular) are probably the feature I love the most coming from JavaScript to Python. It enables you to write concise code for something you do very often: Iterating over a list, modifying the data a bit (\\u201Cdata massaging\\u201D) and returning a list with the new entries.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"One thing to note:\"), \" List comprehension load the entire output into memory so this should only be used for small to medium-sized lists. In cases of big lists, use generators instead.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Basic Syntax (for lists):\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"[expression for item in iterable if conditional]\\n\")), mdx(Alert, {\n    status: \"info\",\n    title: \"Note\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"If you want to try the instructions below you can fire up the Python REPL. If\\nyou have Python installed run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python\"), \" in your terminal. Any Python code that\\nstarts with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">>>\"), \" symbols indicated that it was typed into a REPL.\\nTo try out the JavaScript snippets you could use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://quokkajs.com/\"\n  }, \"Quokka.js\"), \" in your editor.\")), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"p\", null, \"Iterating over the array and giving out the length of the word itself into a new list:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const names = [\\\"James\\\", \\\"Naomi\\\", \\\"Amos\\\", \\\"Alex\\\", \\\"Bobbie\\\", \\\"Clarissa\\\"]\\nconst len_names = names.map((name) => name.length)\\nconsole.log(len_names)\\n// [ 5, 5, 4, 4, 6, 8 ]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-py\"\n  }, \">>> names = [\\\"James\\\", \\\"Naomi\\\", \\\"Amos\\\", \\\"Alex\\\", \\\"Bobbie\\\", \\\"Clarissa\\\"]\\n>>> len_names = [len(name) for name in names]\\n>>> print(len_names)\\n[5, 5, 4, 4, 6, 8]\\n\")), mdx(\"p\", null, \"Skipping the first item & last item (by index) and creating a list of dictionaries:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const names = [\\\"James\\\", \\\"Naomi\\\", \\\"Amos\\\", \\\"Alex\\\", \\\"Bobbie\\\", \\\"Clarissa\\\"]\\nconst names_list = names\\n  .filter((_, id) => id !== 0 && id !== names.length - 1)\\n  .map((name) => ({ name, length: name.length }))\\nconsole.log(names_list)\\n// [ { name: 'Naomi', length: 5 },\\u2008{ name: 'Amos', length: 4 },\\u2008{ name: 'Alex', length: 4 },\\u2008{ name: 'Bobbie', length: 6 } ]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-py\"\n  }, \">>> names = [\\\"James\\\", \\\"Naomi\\\", \\\"Amos\\\", \\\"Alex\\\", \\\"Bobbie\\\", \\\"Clarissa\\\"]\\n>>> names_list = [{ \\\"name\\\": name, \\\"length\\\": len(name) } for idx, name in enumerate(names) if idx != 0 and idx != len(names)-1]\\n>>> print(names_list)\\n[{'name': 'Naomi', 'length': 5}, {'name': 'Amos', 'length': 4}, {'name': 'Alex', 'length': 4}, {'name': 'Bobbie', 'length': 6}]\\n\")), mdx(\"p\", null, \"Tuple unpacking:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const students = [\\n  [\\\"James\\\", 16],\\n  [\\\"Naomi\\\", 20],\\n]\\nconst nameWithAge = students.map((s) => [s[0].length + s[1], ...s])\\nconsole.log(nameWithAge)\\n// [ [ 21, 'James', 16 ], [ 25, 'Naomi', 20 ] ]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-py\"\n  }, \">>> students = [(\\\"James\\\", 16), (\\\"Naomi\\\", 20)]\\n>>> nameWithAge = [[len(s[0])+s[1], *s] for s in students]\\n>>> print(nameWithAge)\\n[[21, 'James', 16], [25, 'Naomi', 20]]\\n\")), mdx(\"p\", null, \"Creating a list of characters from a string:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const myName = \\\"LekoArts\\\"\\nconst arr = [...myName]\\nconsole.log(arr)\\n// [ 'L', 'e', 'k', 'o', 'A', 'r', 't', 's' ]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-py\"\n  }, \">>> my_name = 'LekoArts'\\n>>> arr = [l for l in my_name]\\n>>> print(arr)\\n['L', 'e', 'k', 'o', 'A', 'r', 't', 's']\\n\")), mdx(\"p\", null, \"Reversing strings in a tuple and returning them as a list:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const words = [\\\"kayak\\\", \\\"LekoArts\\\", \\\"radar\\\", \\\"python\\\"]\\nconst reversed = words.map((word) => word.split(\\\"\\\").reverse().join(\\\"\\\"))\\nconsole.log(reversed)\\n// [ 'kayak', 'strAokeL', 'radar', 'nohtyp' ]\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-py\"\n  }, \">>> words = (\\\"kayak\\\", \\\"LekoArts\\\", \\\"radar\\\", \\\"python\\\")\\n>>> reversed = [word[::-1] for word in words]\\n>>> print(reversed)\\n['kayak', 'strAokeL', 'radar', 'nohtyp']\\n\")), mdx(\"p\", null, \"You can also nest comprehensions. Here\\u2019s a 3 by 3 identity matrix:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-py\"\n  }, \">>> matrix = [[1 if item_idx == row_idx else 0 for item_idx in range(0, 3)] for row_idx in range(0, 3)]\\n>>> print(matrix)\\n[[1, 0, 0], [0, 1, 0], [0, 0, 1]]\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/garden/python-comprehensions","icon":"python","seoLastUpdated":"2021-07-17T00:00:00.000Z","lastUpdated":"Jul 17, 2021","seoDate":"2021-07-17T00:00:00.000Z","date":"Jul 17, 2021","yearDate":"2021","tags":["Python"],"timeToRead":1,"excerpt":"Comprehensions (and list comprehensions in particular) are probably the feature I love the most coming from JavaScript to Python. It enablesâ€¦","parent":{"parent":{"relativePath":"2021-07-17--python-comprehensions/index.mdx"}}}},"pageContext":{"slug":"/garden/python-comprehensions"}},
    "staticQueryHashes": ["2299006781","3050858678","4184542181","712324210"]}