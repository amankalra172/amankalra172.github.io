{
    "componentChunkName": "component---src-templates-garden-tsx",
    "path": "/garden/adding-a-draft-feature-to-gatsby",
    "result": {"data":{"garden":{"title":"Adding a Draft Feature to Gatsby","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Adding a Draft Feature to Gatsby\",\n  \"date\": \"2019-09-08T00:00:00.000Z\",\n  \"lastUpdated\": \"2021-04-26T00:00:00.000Z\",\n  \"icon\": \"gatsby\",\n  \"tags\": [\"Gatsby\", \"MDX\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There are a lot of guides on the internet on how to add default values to your Gatsby schema, e.g. a draft entry in the frontmatter to hide posts that are still work-in-progress. However, all these solutions are kinda hacky, as they for example require you to use environment variables or even define the draft entry in every single frontmatter you have. Since Gatsby implemented its \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/blog/2019-03-18-releasing-new-schema-customization/\"\n  }, \"schema customization API\"), \" there is an easy solution (and not hacky at all!) available. Most importantly: This quick tip is applicable to all data sources you have, not only markdown (and its frontmatter).\"), mdx(\"p\", null, \"You can have a look at the codesandbox \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/gatsby-draft-default-values-3dd2l\"\n  }, \"gatsby-draft-default-values\"), \" to see the working code in a minimal example.\"), mdx(\"p\", null, \"If you want to follow the example along, you can install the default blog starter by running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby new my-blog https://github.com/gatsbyjs/gatsby-starter-blog\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-cli\"), \".\"), mdx(\"h2\", {\n    \"id\": \"setup\"\n  }, \"Setup\"), mdx(\"p\", null, \"The default blog starter uses markdown for its content and you can use the so called frontmatter in markdown files to define additional data, such as e.g. a draft status (true or false). The goal is to define a default value for this draft status so that you don\\u2019t have to define it in every markdown file but only in the ones you\\u2019d like to be a draft.\"), mdx(\"p\", null, \"Add this to the existing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gatsby-node.js\",\n    \"title\": \"gatsby-node.js\"\n  }, \"exports.createSchemaCustomization = ({ actions }) => {\\n  const { createTypes, createFieldExtension } = actions\\n\\n  createFieldExtension({\\n    name: \\\"defaultFalse\\\",\\n    extend() {\\n      return {\\n        resolve(source, args, context, info) {\\n          if (source[info.fieldName] == null) {\\n            return false\\n          }\\n          return source[info.fieldName]\\n        },\\n      }\\n    },\\n  })\\n\\n  createTypes(`\\n    type MarkdownRemark implements Node {\\n      frontmatter: Frontmatter\\n    }\\n    type Frontmatter {\\n      draft: Boolean @defaultFalse\\n    }\\n  `)\\n}\\n\")), mdx(\"p\", null, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createTypes\"), \" function you have to define a nested type on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MarkdownRemark\"), \" type (read \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/docs/reference/graphql-data-layer/schema-customization/#nested-types\"\n  }, \"Nested types\"), \" for more info) to be able to type the draft field. On the draft field itself the custom extension is used as a directive. The directive allows you to reuse this action on other fields, too. In case you\\u2019re using a CMS or other datasource than markdown you\\u2019ll need to find and define your type (instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MarkdownRemark\"), \") to have this working. I\\u2019d recommend using GraphiQL (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:8000/___graphql\"), \") if you\\u2019re unsure about the names!\"), mdx(\"p\", null, \"To be able to use the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"@defaultFalse\"), \" directive, you need to define a custom extension with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createFieldExtension\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"source\"), \" contains all fields from the frontmatter (in this case: title, description, date, and draft). \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"info.fieldName\"), \" is the name of the field you\\u2019re applying the directive to \\u2013 in this case \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"draft\"), \". Fields that are not provided are null by default but because draft should be a boolean you need to return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" in this case. If it\\u2019s provided simply return the value.\"), mdx(\"p\", null, \"Read the complete guide on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/docs/reference/graphql-data-layer/schema-customization/#creating-type-definitions\"\n  }, \"Creating type definitions\"), \" to get in-depth knowledge of how and why it works this way.\"), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Now that the draft field is set up and defaults to false, you can go ahead and add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"draft: true\"), \" to the frontmatter of a blogpost.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-md\"\n  }, \"---\\ntitle: My Second Post!\\ndate: \\\"2015-05-06T23:46:37.121Z\\\"\\ndraft: true\\n---\\n\")), mdx(\"p\", null, \"When opening GraphiQL you also should be able to query the draft field now and filter by it. A query to list all markdown posts that are not a draft looks like:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"query {\\n  allMarkdownRemark(filter: { frontmatter: { draft: { eq: false } } }) {\\n    nodes {\\n      frontmatter {\\n        title\\n        description\\n        date\\n        draft\\n      }\\n    }\\n  }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/garden/adding-a-draft-feature-to-gatsby","icon":"gatsby","seoLastUpdated":"2021-04-26T00:00:00.000Z","lastUpdated":"Apr 26, 2021","seoDate":"2019-09-08T00:00:00.000Z","date":"Sep 08, 2019","yearDate":"2019","tags":["Gatsby","MDX"],"timeToRead":2,"excerpt":"There are a lot of guides on the internet on how to add default values to your Gatsby schema, e.g. a draft entry in the frontmatter to hideâ€¦","parent":{"parent":{"relativePath":"2019-09-08--adding-a-draft-feature-to-gatsby/index.mdx"}}}},"pageContext":{"slug":"/garden/adding-a-draft-feature-to-gatsby"}},
    "staticQueryHashes": ["2299006781","3050858678","4184542181","712324210"]}