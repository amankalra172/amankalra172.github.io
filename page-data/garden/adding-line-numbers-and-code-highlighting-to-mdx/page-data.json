{
    "componentChunkName": "component---src-templates-garden-tsx",
    "path": "/garden/adding-line-numbers-and-code-highlighting-to-mdx",
    "result": {"data":{"garden":{"title":"Adding Line Numbers and Code Highlighting to MDX","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Adding Line Numbers and Code Highlighting to MDX\",\n  \"date\": \"2020-02-19T00:00:00.000Z\",\n  \"lastUpdated\": \"2021-04-26T00:00:00.000Z\",\n  \"icon\": \"mdx\",\n  \"tags\": [\"Gatsby\", \"MDX\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this very short quick tip you\\u2019ll learn how to set up code blocks in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://mdxjs.com/\"\n  }, \"MDX\"), \" and Gatsby that support line numbers and code highlighting using the code renderer \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/FormidableLabs/prism-react-renderer\"\n  }, \"prism-react-renderer\"), \". A preview can be found on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/mdx-line-numbers-code-highlighting-99wb5\"\n  }, \"CodeSandbox\"), \".\"), mdx(\"p\", null, \"First, make sure that you have a MDX blog set up. If you have that already, you can skip to the packages. If not, you should first read \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/docs/mdx/getting-started/\"\n  }, \"Getting Started with MDX\"), \" on Gatsby\\u2019s documentation.\"), mdx(\"p\", null, \"Install the necessary packages for this quick tip:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"npm install mdx-utils prism-react-renderer\\n\")), mdx(\"p\", null, \"Create a Code React component in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components/code.js\"), \" and leave the file empty for now.\"), mdx(\"p\", null, \"Also create a CSS file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\",\n    \"metastring\": \"title=src/components/layout.css\",\n    \"title\": \"src/components/layout.css\"\n  }, \"html,\\nbody {\\n  margin: 0;\\n  padding: 0;\\n}\\n\\nhtml {\\n  font-family: sans-serif;\\n  -ms-text-size-adjust: 100%;\\n  -webkit-text-size-adjust: 100%;\\n}\\n\\n.prism-code {\\n  font-size: 1rem;\\n  padding-top: 1rem;\\n  padding-bottom: 1rem;\\n  -webkit-overflow-scrolling: touch;\\n  background-color: transparent;\\n  overflow: initial;\\n}\\n\\n.token {\\n  display: inline-block;\\n}\\n\\np > code,\\nli > code {\\n  background: rgb(1, 22, 39);\\n  color: rgb(214, 222, 235);\\n  padding: 0.4em 0.3rem;\\n}\\n\\n.gatsby-highlight {\\n  font-size: 1rem;\\n  position: relative;\\n  -webkit-overflow-scrolling: touch;\\n  overflow: auto;\\n}\\n\\ngatsby-highlight > code[class*=\\\"language-\\\"],\\n.gatsby-highlight > pre[class*=\\\"language-\\\"] {\\n  word-spacing: normal;\\n  word-break: normal;\\n  overflow-wrap: normal;\\n  line-height: 1.5;\\n  tab-size: 4;\\n  hyphens: none;\\n}\\n\\n.line-number-style {\\n  display: inline-block;\\n  padding-left: 1em;\\n  padding-right: 1em;\\n  width: 1.2em;\\n  user-select: none;\\n  opacity: 0.3;\\n  text-align: center;\\n  position: relative;\\n}\\n\\n.highlight-line {\\n  background-color: rgb(2, 55, 81);\\n  border-left: 4px solid rgb(2, 155, 206);\\n}\\n\\n.highlight-line .line-number-style {\\n  opacity: 0.5;\\n  width: calc(1.2em - 4px);\\n  left: -2px;\\n}\\n\")), mdx(\"p\", null, \"Switch to your file that contains the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MDXProvider\"), \". If you use e.g. the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultLayouts\"), \" option inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-plugin-mdx\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gatsby-config.js\",\n    \"title\": \"gatsby-config.js\"\n  }, \"module.exports = {\\n  plugins: [\\n    {\\n      resolve: \\\"gatsby-plugin-mdx\\\",\\n      options: {\\n        defaultLayouts: {\\n          default: require.resolve(\\\"./src/components/layout.js\\\"),\\n        },\\n      },\\n    },\\n  ],\\n}\\n\")), mdx(\"p\", null, \"You\\u2019ll need to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MDXProvider\"), \" and the rest of the following code (it\\u2019s essentially the components placed into the wrapping \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MDXProvider\"), \") to your Layout file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=src/components/layout.js\",\n    \"title\": \"src/components/layout.js\"\n  }, \"import * as React from \\\"react\\\"\\nimport { MDXProvider } from \\\"@mdx-js/react\\\"\\nimport { preToCodeBlock } from \\\"mdx-utils\\\"\\nimport Code from \\\"./code\\\"\\nimport \\\"./layout.css\\\"\\n\\nconst components = {\\n  pre: (preProps) => {\\n    const props = preToCodeBlock(preProps)\\n    if (props) {\\n      return <Code {...props} />\\n    } else {\\n      return <pre {...preProps} />\\n    }\\n  },\\n}\\n\\nconst Layout = ({ children }) => (\\n  <MDXProvider components={components}>\\n    <div style={{ margin: \\\"0 auto\\\", maxWidth: 960, padding: \\\"2rem\\\" }}>\\n      {children}\\n    </div>\\n  </MDXProvider>\\n)\\n\\nexport default Layout\\n\")), mdx(\"p\", null, \"The important bit is that you pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components\"), \" into the provider and the previously created Code React component is used.\"), mdx(\"p\", null, \"Add the following to said component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=src/components/code.js\",\n    \"title\": \"src/components/code.js\"\n  }, \"import * as React from \\\"react\\\"\\nimport Highlight, { defaultProps } from \\\"prism-react-renderer\\\"\\nimport theme from \\\"prism-react-renderer/themes/nightOwl\\\"\\n\\nconst RE = /{([\\\\d,-]+)}/\\n\\nconst calculateLinesToHighlight = (meta) => {\\n  if (!RE.test(meta)) {\\n    return () => false\\n  }\\n  const lineNumbers = RE.exec(meta)[1]\\n    .split(`,`)\\n    .map((v) => v.split(`-`).map((x) => parseInt(x, 10)))\\n  return (index) => {\\n    const lineNumber = index + 1\\n    const inRange = lineNumbers.some(([start, end]) =>\\n      end ? lineNumber >= start && lineNumber <= end : lineNumber === start\\n    )\\n    return inRange\\n  }\\n}\\n\\nconst Code = ({ codeString, language, metastring, ...props }) => {\\n  const shouldHighlightLine = calculateLinesToHighlight(metastring)\\n\\n  return (\\n    <Highlight\\n      {...defaultProps}\\n      code={codeString}\\n      language={language}\\n      theme={theme}\\n      {...props}\\n    >\\n      {({ className, style, tokens, getLineProps, getTokenProps }) => (\\n        <div className=\\\"gatsby-highlight\\\" data-language={language}>\\n          <pre className={className} style={style}>\\n            {tokens.map((line, i) => {\\n              const lineProps = getLineProps({ line, key: i })\\n\\n              if (shouldHighlightLine(i)) {\\n                lineProps.className = `${lineProps.className} highlight-line`\\n              }\\n\\n              return (\\n                <div {...lineProps}>\\n                  <span className=\\\"line-number-style\\\">{i + 1}</span>\\n                  {line.map((token, key) => (\\n                    <span {...getTokenProps({ token, key })} />\\n                  ))}\\n                </div>\\n              )\\n            })}\\n          </pre>\\n        </div>\\n      )}\\n    </Highlight>\\n  )\\n}\\n\\nexport default Code\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"calculateLinesToHighlight\"), \" helper function gets the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"metastring\"), \" as an input which is the notation for the line highlighting. As you can see in the linked \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/mdx-line-numbers-code-highlighting-99wb5\"\n  }, \"CodeSandbox\"), \" example you can write \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{1,9-12}\"), \" to highlight the first and 9th to 12th line.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/garden/adding-line-numbers-and-code-highlighting-to-mdx","icon":"mdx","seoLastUpdated":"2021-04-26T00:00:00.000Z","lastUpdated":"Apr 26, 2021","seoDate":"2020-02-19T00:00:00.000Z","date":"Feb 19, 2020","yearDate":"2020","tags":["Gatsby","MDX"],"timeToRead":1,"excerpt":"In this very short quick tip you'll learn how to set up code blocks in  MDX  and Gatsby that support line numbers and code highlighting…","parent":{"parent":{"relativePath":"2020-02-19--adding-line-numbers-and-code-highlighting-to-mdx/index.mdx"}}}},"pageContext":{"slug":"/garden/adding-line-numbers-and-code-highlighting-to-mdx"}},
    "staticQueryHashes": ["2299006781","3050858678","4184542181","712324210"]}