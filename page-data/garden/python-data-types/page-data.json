{
    "componentChunkName": "component---src-templates-garden-tsx",
    "path": "/garden/python-data-types",
    "result": {"data":{"garden":{"title":"Python: Data Types","body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Python: Data Types\",\n  \"date\": \"2021-07-16T00:00:00.000Z\",\n  \"lastUpdated\": \"2021-07-16T00:00:00.000Z\",\n  \"icon\": \"python\",\n  \"tags\": [\"Python\"]\n};\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\nvar Alert = makeShortcode(\"Alert\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Coming from JavaScript it\\u2019s refreshing to learn Python as it has a big standard library and easy to pick up (especially if you have prior programming knowledge). Starting off with the data types I want to highlight some awesome features that Python has and interesting differences I saw. So don\\u2019t expect this to be a complete guide or comparison of both.\"), mdx(Alert, {\n    status: \"info\",\n    title: \"Note\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"If you want to try the instructions below you can fire up the Python REPL. If you have Python installed run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python\"), \"\\nin your terminal. Any Python code that starts with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">>>\"), \" symbols indicated that it was typed into a REPL.\")), mdx(\"h2\", {\n    \"id\": \"helper-functions\"\n  }, \"Helper Functions\"), mdx(\"p\", null, \"Python itself has helpful functions to help you define and discover the types. They are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dir()\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"help()\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-py\"\n  }, \">>> name = \\\"Lennart\\\"\\n>>> type(name)\\n<class 'str'>\\n>>> dir(str)\\n['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\\n>>> help(str.title)\\nHelp on method_descriptor:\\n\\ntitle(self, /)\\n    Return a version of the string where each word is titlecased.\\n\\n    More specifically, words start with uppercased characters and all remaining\\n    cased characters have lower case.\\n\")), mdx(\"h2\", {\n    \"id\": \"numbers\"\n  }, \"Numbers\"), mdx(\"p\", null, \"Python has more explicit types for working with numbers. In JavaScript they are mashed together into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Number\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-py\"\n  }, \">>> x = 4\\n>>> y = 5.0\\n>>> z = 42j\\n>>> type(x)\\n<class 'int'>\\n>>> type(y)\\n<class 'float'>\\n>>> type(z)\\n<class 'complex'>\\n\")), mdx(\"h2\", {\n    \"id\": \"tuple\"\n  }, \"Tuple\"), mdx(\"p\", null, \"Tuples are immutable collections that you can use to track related but different items. Thus they are great as immutable keys in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dict\"), \". \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Unpacking\"), \" is a way of quickly getting information from a tuple:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-py\"\n  }, \">>> favourite_food = (\\\"Italian\\\", \\\"Pizza\\\")\\n>>> cuisine, name = favourite_food\\n>>> cuisine\\n'Italian'\\n>>> name\\n'Pizza'\\n\")), mdx(\"h2\", {\n    \"id\": \"set\"\n  }, \"Set\"), mdx(\"p\", null, \"A set is mutable and stores immutable types in an unsorted way. You can\\u2019t store other mutable types (like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"list\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dict\"), \") in it. A set can only contain unique items.\"), mdx(\"p\", null, \"This is great to quickly deduplicate a list:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-py\"\n  }, \">>> names = [\\\"Luke\\\", \\\"Leia\\\", \\\"Malak\\\", \\\"Luke\\\"]\\n>>> set(names)\\n{'Leia', 'Luke', 'Malak'}\\n\")), mdx(\"p\", null, \"You can execute a couple of mutations on a set (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".add\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".discard\"), \" etc.) but I definitely found \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".update\"), \" interesting since you can add multiple values at once:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-py\"\n  }, \">>> chars = {\\\"James\\\", \\\"Naomi\\\", \\\"Amos\\\"}\\n>>> addition = {\\\"Alex\\\", \\\"Julie\\\"}\\n>>> chars.update(addition)\\n>>> chars\\n{'Julie', 'James', 'Naomi', 'Alex', 'Amos'}\\n\")), mdx(\"p\", null, \"Another cool thing are the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set\"), \" operations \\u2014 union and intersection:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-py\"\n  }, \">>> chars = {\\\"James\\\", \\\"Naomi\\\", \\\"Amos\\\"}\\n>>> favourite_chars = {\\\"James\\\"}\\n>>> chars | addition\\n{'Julie', 'James', 'Naomi', 'Alex', 'Amos'}\\n>>> chars & favourite_chars\\n{'James'}\\n\")), mdx(\"h2\", {\n    \"id\": \"dictionary\"\n  }, \"Dictionary\"), mdx(\"p\", null, \"A dictionary is mutable and stores key:value pairs (keys can only be immutable types). Thus it\\u2019s extremely fast to search in. Besides the standard stuff there are three helpful methods: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"keys()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"values()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"items()\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-py\"\n  }, \">>> chars = { \\\"expanse\\\": \\\"Holden\\\", \\\"star_wars\\\": \\\"Luke\\\" }\\n>>> chars.keys()\\ndict_keys(['expanse', 'star_wars'])\\n>>> chars.values()\\ndict_values(['Holden', 'Luke'])\\n>>> chars.items()\\ndict_items([('expanse', 'Holden'), ('star_wars', 'Luke')])\\n\")), mdx(\"p\", null, \"While these functions alone are not doing much, they can come in really handy in for-loops:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-py\"\n  }, \">>> for franchise, char in chars.items():\\n...     print(f\\\"The char {char} exists in the franchise {franchise}\\\")\\n...\\nThe char Holden exists in the franchise expanse\\nThe char Luke exists in the franchise star_wars\\n\")), mdx(\"p\", null, \"Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"items()\"), \" returns a list of tuples one can use tuple unpacking to get both values.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/garden/python-data-types","icon":"python","seoLastUpdated":"2021-07-16T00:00:00.000Z","lastUpdated":"Jul 16, 2021","seoDate":"2021-07-16T00:00:00.000Z","date":"Jul 16, 2021","yearDate":"2021","tags":["Python"],"timeToRead":1,"excerpt":"Coming from JavaScript it's refreshing to learn Python as it has a big standard library and easy to pick up (especially if you have priorâ€¦","parent":{"parent":{"relativePath":"2021-07-16--python-data-types/index.mdx"}}}},"pageContext":{"slug":"/garden/python-data-types"}},
    "staticQueryHashes": ["2299006781","3050858678","4184542181","712324210"]}