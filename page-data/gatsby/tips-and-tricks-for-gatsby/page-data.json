{
    "componentChunkName": "component---src-templates-tutorial-tsx",
    "path": "/gatsby/tips-and-tricks-for-gatsby",
    "result": {"data":{"post":{"slug":"/gatsby/tips-and-tricks-for-gatsby","title":"Tips & Tricks for Gatsby","description":"A collection of short, but useful quick tips shared by me and the community about Gatsby. From GraphQL over local development to deployment.","excerpt":"For some time now I've been trying to publish quick tips about Gatsby on Twitter, because the community loves such short, useful tipsâ€¦","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tips & Tricks for Gatsby\",\n  \"subtitle\": \"\",\n  \"date\": \"2019-03-02T00:00:00.000Z\",\n  \"lastUpdated\": \"2021-05-01T00:00:00.000Z\",\n  \"description\": \"A collection of short, but useful quick tips shared by me and the community about Gatsby. From GraphQL over local development to deployment.\",\n  \"type\": \"tutorial\",\n  \"category\": \"Gatsby\",\n  \"image\": \"/og-images/tips-and-tricks-gatsby.png?v=1\",\n  \"published\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Alert = makeShortcode(\"Alert\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"For some time now I\\u2019ve been trying to publish quick tips about Gatsby on Twitter, because the community loves such short, useful tips. Accordingly, I had already created a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.com/i/moments/1024936211444576258\"\n  }, \"Twitter moment\"), \" back then \\u2014 but why only content from me? On January 6th of this year I also called the community to share their quick tips (with great success). As promised, this blogpost is supposed to be a collection of these (and other) tips. You can also tag me on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.com/lekoarts_de\"\n  }, \"Twitter\"), \" if you want to add your tip to the moment!\"), mdx(\"p\", null, \"Some tips are also accompanied by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io\"\n  }, \"CodeSandbox\"), \" examples.\"), mdx(Alert, {\n    status: \"info\",\n    title: \"Tweet's contents\",\n    mdxType: \"Alert\"\n  }, mdx(\"p\", null, \"Most tips on Twitter are code examples embedded in an image. For a blog post it wouldn\\u2019t make much sense to display\\nimages instead of copy-able code \\u2014 therefore the tweets are not embedded here, but the authors are quoted\\ndifferently. If you are the author of one of these tweets and disagree, please contact me. Thanks a lot!\")), mdx(\"h2\", {\n    \"id\": \"date-of-last-build\"\n  }, \"Date of last Build\"), mdx(\"p\", null, \"Gives you the date for when you last used gatsby build. In the case of e.g. Gatsby Cloud that would be the last time you deployed your site (hence buildTime). Please use this query sparingly (e.g. not in your footer component that you share with every page) as otherwise on every build the queries would be invalidated (since the time changed) and you\\u2019d unnecessarily rebuild all pages.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/ypmxy84nlx\"\n  }, \"CodeSandbox\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import * as React from \\\"react\\\"\\nimport { graphql } from \\\"gatsby\\\"\\n\\nconst IndexPage = ({ data }) => {\\n  return (\\n    <main>\\n      <p>This site was last built on:</p>\\n      <p>{data.site.buildTime}</p>\\n    </main>\\n  )\\n}\\n\\nexport default IndexPage\\n\\nexport const query = graphql`\\n  query {\\n    site {\\n      buildTime(formatString: \\\"DD/MM/YYYY\\\")\\n    }\\n  }\\n`\\n\")), mdx(\"h2\", {\n    \"id\": \"date-of-last-modification\"\n  }, \"Date of last modification\"), mdx(\"p\", null, \"For open source docs it\\u2019s good to know when a document was last modified. You can get that information via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parent\"), \" if you use local files like Markdown, MDX, YAML etc. Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"___graphql\"), \" endpoint to explore that information on your own project.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/vjp58m9r50\"\n  }, \"CodeSandbox\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"query {\\n  allMdx {\\n    nodes {\\n      parent {\\n        ... on File {\\n          modifiedTime(formatString: \\\"MM/DD/YYYY\\\")\\n        }\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"same-source-different-queries\"\n  }, \"Same Source, different Queries\"), mdx(\"p\", null, \"When you define two (or more) \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-source-filesystem\"), \" entries in your config you can filter your GraphQL queries to only get the result of one source.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/ykpjk9333j\"\n  }, \"CodeSandbox\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gatsby-config.js\",\n    \"title\": \"gatsby-config.js\"\n  }, \"module.exports = {\\n  plugins: [\\n    {\\n      resolve: \\\"gatsby-source-filesystem\\\",\\n      options: {\\n        name: \\\"assets\\\",\\n        path: `${__dirname}/src/assets`,\\n      },\\n    },\\n    {\\n      resolve: \\\"gatsby-source-filesystem\\\",\\n      options: {\\n        name: \\\"logos\\\",\\n        path: `${__dirname}/src/logos`,\\n      },\\n    },\\n    \\\"gatsby-transformer-sharp\\\",\\n    \\\"gatsby-plugin-sharp\\\",\\n  ],\\n}\\n\")), mdx(\"p\", null, \"Now place one image file in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/logos\"), \" folder and two or more image files in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/assets\"), \" folder. This should show the difference between the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"file\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"allFile\"), \" query (of course you can put any number of files into one folder). You can address both folders individually, as shown in the following example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import * as React from \\\"react\\\"\\nimport { graphql } from \\\"gatsby\\\"\\nimport { GatsbyImage, getImage } from \\\"gatsby-plugin-image\\\"\\n\\nconst IndexPage = ({ data }) => {\\n  return (\\n    <main>\\n      <p>First image (logo):</p>\\n      <GatsbyImage image={getImage(data.logo)} />\\n      <p>Assets images (two):</p>\\n      <div style={{ display: \\\"flex\\\", flexWrap: \\\"wrap\\\" }}>\\n        {data.assets.nodes.map((img) => (\\n          <GatsbyImage image={getImage(img.childImageSharp)} />\\n        ))}\\n      </div>\\n    </main>\\n  )\\n}\\n\\nexport default IndexPage\\n\\nexport const query = graphql`\\n  query {\\n    logo: file(sourceInstanceName: { eq: \\\"logos\\\" }) {\\n      childImageSharp {\\n        gatsbyImageData(width: 200, quality: 100)\\n      }\\n    }\\n    assets: allFile(filter: { sourceInstanceName: { eq: \\\"assets\\\" } }) {\\n      nodes {\\n        childImageSharp {\\n          gatsbyImageData(width: 200, quality: 100)\\n        }\\n      }\\n    }\\n  }\\n`\\n\")), mdx(\"h2\", {\n    \"id\": \"gatsbys-reporter-api\"\n  }, \"Gatsby\\u2019s reporter API\"), mdx(\"p\", null, \"You can not only use async/await in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \" but also use Gatsby\\u2019s reporter API. Use this to throw errors. You should use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"panicOnBuild\"), \" to only stop the process on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby build\"), \" (so that you can debug it with GraphiQL).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gatsby-node.js\",\n    \"title\": \"gatsby-node.js\"\n  }, \"const yourTemplate = require.resolve(\\\"./src/templates/yourTemplate.js\\\")\\n\\nexports.createPages = async ({ graphql, actions, reporter }) => {\\n  const { createPage } = actions\\n\\n  const result = await graphql(`\\n    {\\n      ...your\\n      GraphQL\\n      query\\n    }\\n  `)\\n\\n  if (result.errors) {\\n    reporter.panicOnBuild(\\\"Error while running GraphQL query.\\\")\\n    return\\n  }\\n\\n  result.data.yourNode.nodes.forEach((node) => {\\n    // createPage function\\n  })\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"previousnext---links\"\n  }, \"Previous/Next - Links\"), mdx(\"p\", null, \"Most of the time you want to show a previous/next post under your blog post to keep the visitor reading. For that you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pageContext\"), \".\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/5k7r3ok7k\"\n  }, \"CodeSandbox\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gatsby-node.js\",\n    \"title\": \"gatsby-node.js\"\n  }, \"const bookTemplate = require.resolve(\\\"./src/templates/book.js\\\")\\n\\nexports.createPages = async ({ graphql, actions, reporter }) => {\\n  const { createPage } = actions\\n\\n  const result = await graphql(\\n    graphql(`\\n      {\\n        allBooksYaml(sort: { fields: [title], order: ASC }) {\\n          nodes {\\n            slug\\n            title\\n          }\\n        }\\n      }\\n    `)\\n  )\\n\\n  if (result.errors) {\\n    reporter.panicOnBuild(\\\"Error while running GraphQL query.\\\")\\n    return\\n  }\\n\\n  const books = result.data.allBooksYaml.nodes\\n\\n  books.forEach((node, index) => {\\n    // Set the prev/next variable for every node so\\n    // that you can directly access slug & title\\n\\n    const prev = index === 0 ? null : books[index - 1]\\n    const next = index === books.length - 1 ? null : books[index + 1]\\n\\n    createPage({\\n      path: node.slug,\\n      component: bookTemplate,\\n      context: {\\n        slug: node.slug,\\n        prev,\\n        next,\\n      },\\n    })\\n  })\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=src/templates/book.js\",\n    \"title\": \"src/templates/book.js\"\n  }, \"import * as React from \\\"react\\\"\\nimport { graphql, Link } from \\\"gatsby\\\"\\n\\nimport Layout from \\\"../components/layout\\\"\\n\\nconst BookTemplate = ({ data: { booksYaml }, pageContext: { prev, next } }) => {\\n  return (\\n    <Layout>\\n      <h2>{booksYaml.title}</h2>\\n      <div>\\n        {prev && (\\n          <div>\\n            <span>Previous</span>\\n            <Link to={prev.slug}>{prev.title}</Link>\\n          </div>\\n        )}\\n        {next && (\\n          <div>\\n            <span>Next</span>\\n            <Link to={next.slug}>{next.title}</Link>\\n          </div>\\n        )}\\n      </div>\\n    </Layout>\\n  )\\n}\\n\\nexport default BookTemplate\\n\\nexport const pageQuery = graphql`\\n  query BookBySlug($slug: String!) {\\n    booksYaml(slug: { eq: $slug }) {\\n      title\\n      content\\n    }\\n  }\\n`\\n\")), mdx(\"h2\", {\n    \"id\": \"random-links\"\n  }, \"Random Links\"), mdx(\"p\", null, \"In contrast to the previous tip you can also show two (or more) random posts by changing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \".\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/520jv2nylk\"\n  }, \"CodeSandbox\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gatsby-node.js\",\n    \"title\": \"gatsby-node.js\"\n  }, \"const _ = require(\\\"lodash\\\")\\n\\nconst prevNext = (list, item) => {\\n  // Create a random selection of other posts (excluding the current post)\\n  const filterUnique = _.filter(list, (input) => input.slug !== item.slug)\\n  const sample = _.sampleSize(filterUnique, 2)\\n\\n  return {\\n    prev: sample[0],\\n    next: sample[1],\\n  }\\n}\\n\\nconst bookTemplate = require.resolve(\\\"./src/templates/book.js\\\")\\n\\nexports.createPages = async ({ graphql, actions, reporter }) => {\\n  const { createPage } = actions\\n\\n  const result = await graphql(\\n    graphql(`\\n      {\\n        allBooksYaml(sort: { fields: [title], order: ASC }) {\\n          nodes {\\n            slug\\n            title\\n          }\\n        }\\n      }\\n    `)\\n  )\\n\\n  if (result.errors) {\\n    reporter.panicOnBuild(\\\"Error while running GraphQL query.\\\")\\n    return\\n  }\\n\\n  const books = result.data.allBooksYaml.nodes\\n\\n  books.forEach((node) => {\\n    const { prev, next } = prevNext(books, node)\\n\\n    createPage({\\n      path: node.slug,\\n      component: bookTemplate,\\n      context: {\\n        slug: node.slug,\\n        prev,\\n        next,\\n      },\\n    })\\n  })\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"download-images-from-a-cdn\"\n  }, \"Download Images from a CDN\"), mdx(\"p\", null, \"If your images are hosted on a CDN and you want to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-plugin-image\"), \", you can download them using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createRemoteFileNode\"), \" helper. Then add the image to the respective node.\"), mdx(\"p\", null, \"This example assumes that you have Gatsby set up with Markdown and want to use the following frontmatter:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-md\"\n  }, \"---\\ntitle: My first blog post!\\nfeaturedImgUrl: https://images.unsplash.com/photo-1560237731-890b122a9b6c\\nfeaturedImgAlt: Mountains with a starry sky\\n---\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gatsby-node.js\",\n    \"title\": \"gatsby-node.js\"\n  }, \"const { createRemoteFileNode } = require(\\\"gatsby-source-filesystem\\\")\\n\\nexports.createSchemaCustomization = ({ actions }) => {\\n  const { createTypes } = actions\\n  createTypes(`\\n    type MarkdownRemark implements Node {\\n      frontmatter: Frontmatter\\n      featuredImg: File @link(from: \\\"featuredImg___NODE\\\")\\n    }\\n    type Frontmatter {\\n      title: String!\\n      featuredImgUrl: String\\n      featuredImgAlt: String\\n    }\\n  `)\\n}\\nexports.onCreateNode = async ({\\n  node,\\n  actions: { createNode },\\n  store,\\n  cache,\\n  createNodeId,\\n}) => {\\n  // For all MarkdownRemark nodes that have a featured image url, call createRemoteFileNode\\n  if (\\n    node.internal.type === \\\"MarkdownRemark\\\" &&\\n    node.frontmatter.featuredImgUrl !== null\\n  ) {\\n    let fileNode = await createRemoteFileNode({\\n      url: node.frontmatter.featuredImgUrl, // string that points to the URL of the image\\n      parentNodeId: node.id, // id of the parent node of the fileNode you are going to create\\n      createNode, // helper function in gatsby-node to generate the node\\n      createNodeId, // helper function in gatsby-node to generate the node id\\n      cache, // Gatsby's cache\\n      store, // Gatsby's Redux store\\n    })\\n    // if the file was created, attach the new node to the parent node\\n    if (fileNode) {\\n      node.featuredImg___NODE = fileNode.id\\n    }\\n  }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","seoLastUpdated":"2021-05-01T00:00:00.000Z","lastUpdated":"May 01, 2021","seoDate":"2019-03-02T00:00:00.000Z","yearDate":"2019","date":"Mar 02, 2019","subtitle":null,"timeToRead":2,"image":"/og-images/tips-and-tricks-gatsby.png?v=1","category":{"name":"Gatsby","slug":"/gatsby"},"parent":{"parent":{"relativePath":"2019-03-02--tips-and-tricks-for-gatsby/index.mdx"}},"tableOfContents":{"items":[{"url":"#date-of-last-build","title":"Date of last Build"},{"url":"#date-of-last-modification","title":"Date of last modification"},{"url":"#same-source-different-queries","title":"Same Source, different Queries"},{"url":"#gatsbys-reporter-api","title":"Gatsby's reporter API"},{"url":"#previousnext---links","title":"Previous/Next - Links"},{"url":"#random-links","title":"Random Links"},{"url":"#download-images-from-a-cdn","title":"Download Images from a CDN"}]}}},"pageContext":{"slug":"/gatsby/tips-and-tricks-for-gatsby"}},
    "staticQueryHashes": ["2299006781","3050858678","4184542181","712324210"]}